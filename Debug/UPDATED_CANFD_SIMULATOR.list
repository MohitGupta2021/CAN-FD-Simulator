
UPDATED_CANFD_SIMULATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000575c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  0800593c  0800593c  0000693c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c10  08005c10  0000709c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c10  08005c10  00006c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c18  08005c18  0000709c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c18  08005c18  00006c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c1c  08005c1c  00006c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08005c20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  2000009c  08005cbc  0000709c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08005cbc  00007500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f91c  00000000  00000000  000070cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020dc  00000000  00000000  000169e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00018ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b1  00000000  00000000  00019770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f244  00000000  00000000  0001a121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebe3  00000000  00000000  00039365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4327  00000000  00000000  00047f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c26f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c58  00000000  00000000  0010c2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0010ff0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000009c 	.word	0x2000009c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005924 	.word	0x08005924

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a0 	.word	0x200000a0
 800021c:	08005924 	.word	0x08005924

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <uart1_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
typedef int (* putchar_func_t)(int);
static putchar_func_t uart_putchar=NULL;
int uart1_putchar(int ch){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	2201      	movs	r2, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <uart1_putchar+0x20>)
 80005c2:	f003 fb39 	bl	8003c38 <HAL_UART_Transmit>
	return  ch;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000180 	.word	0x20000180

080005d4 <uart3_putchar>:
int uart3_putchar(int ch){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2201      	movs	r2, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <uart3_putchar+0x20>)
 80005e6:	f003 fb27 	bl	8003c38 <HAL_UART_Transmit>
	return  ch;
 80005ea:	687b      	ldr	r3, [r7, #4]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200002a8 	.word	0x200002a8

080005f8 <__io_putchar>:


int __io_putchar(int ch) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	if(uart_putchar != NULL) {
 8000600:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <__io_putchar+0x28>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d005      	beq.n	8000614 <__io_putchar+0x1c>
		return uart_putchar(ch);
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <__io_putchar+0x28>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	4798      	blx	r3
 8000610:	4603      	mov	r3, r0
 8000612:	e000      	b.n	8000616 <__io_putchar+0x1e>

	}
	return ch;
 8000614:	687b      	ldr	r3, [r7, #4]

}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200003a4 	.word	0x200003a4

08000624 <Transmit_Data>:


void Transmit_Data(FDCAN_TxHeaderTypeDef *TxHeader,uint32_t data_id) {
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
	TxHeader->Identifier = data_id;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	601a      	str	r2, [r3, #0]
	TxHeader->IdType = FDCAN_STANDARD_ID;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = FDCAN_DLC_BYTES_64;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	220f      	movs	r2, #15
 8000644:	60da      	str	r2, [r3, #12]
	TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
	TxHeader->BitRateSwitch = FDCAN_BRS_ON;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000652:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_FD_CAN;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800065a:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000662:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0x0;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f001 f860 	bl	8001742 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f889 	bl	8000798 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 fa45 	bl	8000b14 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800068a:	f000 f961 	bl	8000950 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800068e:	f000 f9a9 	bl	80009e4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000692:	f000 f9f3 	bl	8000a7c <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 8000696:	f000 f8cb 	bl	8000830 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800069a:	f000 f911 	bl	80008c0 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */
	FDCAN_Config();
 800069e:	f000 fabf 	bl	8000c20 <FDCAN_Config>
	FDCAN_Config2();
 80006a2:	f000 fb3f 	bl	8000d24 <FDCAN_Config2>
	while (1) {
		uart_putchar=uart1_putchar;
 80006a6:	4b31      	ldr	r3, [pc, #196]	@ (800076c <main+0xf4>)
 80006a8:	4a31      	ldr	r2, [pc, #196]	@ (8000770 <main+0xf8>)
 80006aa:	601a      	str	r2, [r3, #0]

		printf("lOW POWER UART1 CANFD  SIMULATION TOOL  DATA IS COMING FROM CANFD2 TO CANFD1  \n");
 80006ac:	4831      	ldr	r0, [pc, #196]	@ (8000774 <main+0xfc>)
 80006ae:	f004 faa1 	bl	8004bf4 <puts>

		uart_putchar=uart3_putchar;
 80006b2:	4b2e      	ldr	r3, [pc, #184]	@ (800076c <main+0xf4>)
 80006b4:	4a30      	ldr	r2, [pc, #192]	@ (8000778 <main+0x100>)
 80006b6:	601a      	str	r2, [r3, #0]


		printf("UART3 CANFD  SIMULATION TOOL  DATA IS COMING FROM CANFD1 TO CANFD2  \n");
 80006b8:	4830      	ldr	r0, [pc, #192]	@ (800077c <main+0x104>)
 80006ba:	f004 fa9b 	bl	8004bf4 <puts>




		Transmit_Data(&TxHeader,0x321);
 80006be:	f240 3121 	movw	r1, #801	@ 0x321
 80006c2:	482f      	ldr	r0, [pc, #188]	@ (8000780 <main+0x108>)
 80006c4:	f7ff ffae 	bl	8000624 <Transmit_Data>

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, TxData0)!= HAL_OK) {
 80006c8:	4a2e      	ldr	r2, [pc, #184]	@ (8000784 <main+0x10c>)
 80006ca:	492d      	ldr	r1, [pc, #180]	@ (8000780 <main+0x108>)
 80006cc:	482e      	ldr	r0, [pc, #184]	@ (8000788 <main+0x110>)
 80006ce:	f001 fbe8 	bl	8001ea2 <HAL_FDCAN_AddMessageToTxFifoQ>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <main+0x64>
			/* Transmission request Error */
			Error_Handler();
 80006d8:	f000 fd38 	bl	800114c <Error_Handler>
		}


		HAL_Delay(100);
 80006dc:	2064      	movs	r0, #100	@ 0x64
 80006de:	f001 f8a1 	bl	8001824 <HAL_Delay>
		for (int i = 0; i < 64; i++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	e009      	b.n	80006fc <main+0x84>
			TxData4[i] = i;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	b2d9      	uxtb	r1, r3
 80006ec:	4a27      	ldr	r2, [pc, #156]	@ (800078c <main+0x114>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	460a      	mov	r2, r1
 80006f4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 64; i++) {
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3301      	adds	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000700:	ddf2      	ble.n	80006e8 <main+0x70>
//		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData4)
//					!= HAL_OK) {
//				/* Transmission request Error */
//				Error_Handler();
//			}
		HAL_Delay(150);
 8000702:	2096      	movs	r0, #150	@ 0x96
 8000704:	f001 f88e 	bl	8001824 <HAL_Delay>
//
		for (int i = 0; i < 64; i++) {
 8000708:	2300      	movs	r3, #0
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	e00d      	b.n	800072a <main+0xb2>
			TxData6[i] = 3 * i;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	461a      	mov	r2, r3
 8000714:	0052      	lsls	r2, r2, #1
 8000716:	4413      	add	r3, r2
 8000718:	b2d9      	uxtb	r1, r3
 800071a:	4a1d      	ldr	r2, [pc, #116]	@ (8000790 <main+0x118>)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	4413      	add	r3, r2
 8000720:	460a      	mov	r2, r1
 8000722:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 64; i++) {
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	2b3f      	cmp	r3, #63	@ 0x3f
 800072e:	ddee      	ble.n	800070e <main+0x96>

		}
		Transmit_Data(&TxHeader,0x323);
 8000730:	f240 3123 	movw	r1, #803	@ 0x323
 8000734:	4812      	ldr	r0, [pc, #72]	@ (8000780 <main+0x108>)
 8000736:	f7ff ff75 	bl	8000624 <Transmit_Data>

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, TxData6)
 800073a:	4a15      	ldr	r2, [pc, #84]	@ (8000790 <main+0x118>)
 800073c:	4910      	ldr	r1, [pc, #64]	@ (8000780 <main+0x108>)
 800073e:	4812      	ldr	r0, [pc, #72]	@ (8000788 <main+0x110>)
 8000740:	f001 fbaf 	bl	8001ea2 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <main+0xd6>
				!= HAL_OK) {
			/* Transmission request Error */
			Error_Handler();
 800074a:	f000 fcff 	bl	800114c <Error_Handler>
		}

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData6)
 800074e:	4a10      	ldr	r2, [pc, #64]	@ (8000790 <main+0x118>)
 8000750:	490b      	ldr	r1, [pc, #44]	@ (8000780 <main+0x108>)
 8000752:	4810      	ldr	r0, [pc, #64]	@ (8000794 <main+0x11c>)
 8000754:	f001 fba5 	bl	8001ea2 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <main+0xea>
					!= HAL_OK) {
				/* Transmission request Error */
				Error_Handler();
 800075e:	f000 fcf5 	bl	800114c <Error_Handler>
			}
		HAL_Delay(200);
 8000762:	20c8      	movs	r0, #200	@ 0xc8
 8000764:	f001 f85e 	bl	8001824 <HAL_Delay>
	while (1) {
 8000768:	e79d      	b.n	80006a6 <main+0x2e>
 800076a:	bf00      	nop
 800076c:	200003a4 	.word	0x200003a4
 8000770:	080005b1 	.word	0x080005b1
 8000774:	0800593c 	.word	0x0800593c
 8000778:	080005d5 	.word	0x080005d5
 800077c:	0800598c 	.word	0x0800598c
 8000780:	20000378 	.word	0x20000378
 8000784:	20000000 	.word	0x20000000
 8000788:	2000011c 	.word	0x2000011c
 800078c:	2000039c 	.word	0x2000039c
 8000790:	200003a0 	.word	0x200003a0
 8000794:	200000b8 	.word	0x200000b8

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	@ 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	2238      	movs	r2, #56	@ 0x38
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 fb04 	bl	8004db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007be:	f002 f9cd 	bl	8002b5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2340      	movs	r3, #64	@ 0x40
 80007ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007d8:	2301      	movs	r3, #1
 80007da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007dc:	2308      	movs	r3, #8
 80007de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0318 	add.w	r3, r7, #24
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fa67 	bl	8002cc4 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80007fc:	f000 fca6 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2303      	movs	r3, #3
 8000806:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000808:	2390      	movs	r3, #144	@ 0x90
 800080a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f002 fd65 	bl	80032e8 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000824:	f000 fc92 	bl	800114c <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3750      	adds	r7, #80	@ 0x50
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_Init 0 */
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */
  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000834:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 8000836:	4a21      	ldr	r2, [pc, #132]	@ (80008bc <MX_FDCAN1_Init+0x8c>)
 8000838:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800083a:	4b1f      	ldr	r3, [pc, #124]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000840:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 8000842:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000846:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000848:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800084e:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 8000850:	2201      	movs	r2, #1
 8000852:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8000854:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 8000856:	2201      	movs	r2, #1
 8000858:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 800085c:	2201      	movs	r2, #1
 800085e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 8000862:	2208      	movs	r2, #8
 8000864:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 8000868:	2210      	movs	r2, #16
 800086a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 800086e:	2202      	movs	r2, #2
 8000870:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 8000874:	2205      	movs	r2, #5
 8000876:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 800087a:	2204      	movs	r2, #4
 800087c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 8000880:	2205      	movs	r2, #5
 8000882:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 8000886:	220e      	movs	r2, #14
 8000888:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 800088c:	2205      	movs	r2, #5
 800088e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 12;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 8000892:	220c      	movs	r2, #12
 8000894:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 5;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 8000898:	2205      	movs	r2, #5
 800089a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 800089e:	2200      	movs	r2, #0
 80008a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_FDCAN1_Init+0x88>)
 80008a4:	f001 f8f0 	bl	8001a88 <HAL_FDCAN_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80008ae:	f000 fc4d 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /* USER CODE END FDCAN1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000b8 	.word	0x200000b8
 80008bc:	40006400 	.word	0x40006400

080008c0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80008c4:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 80008c6:	4a21      	ldr	r2, [pc, #132]	@ (800094c <MX_FDCAN2_Init+0x8c>)
 80008c8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 80008d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008d6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = ENABLE;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 8;
 80008f0:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 80008f2:	2208      	movs	r2, #8
 80008f4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 80008f6:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 80008f8:	2210      	movs	r2, #16
 80008fa:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 80008fe:	2202      	movs	r2, #2
 8000900:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 8000904:	2205      	movs	r2, #5
 8000906:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 4;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 800090a:	2204      	movs	r2, #4
 800090c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 5;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 8000910:	2205      	movs	r2, #5
 8000912:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 14;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 8000916:	220e      	movs	r2, #14
 8000918:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 5;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 800091c:	2205      	movs	r2, #5
 800091e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 12;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 8000922:	220c      	movs	r2, #12
 8000924:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 5;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 8000928:	2205      	movs	r2, #5
 800092a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 800092e:	2200      	movs	r2, #0
 8000930:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_FDCAN2_Init+0x88>)
 8000934:	f001 f8a8 	bl	8001a88 <HAL_FDCAN_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 800093e:	f000 fc05 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000011c 	.word	0x2000011c
 800094c:	40006800 	.word	0x40006800

08000950 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_Init 0 */
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */
  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000954:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000956:	4a22      	ldr	r2, [pc, #136]	@ (80009e0 <MX_LPUART1_UART_Init+0x90>)
 8000958:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800095a:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000992:	4812      	ldr	r0, [pc, #72]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000994:	f003 f900 	bl	8003b98 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 fbd5 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	480d      	ldr	r0, [pc, #52]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 80009a6:	f003 ff29 	bl	80047fc <HAL_UARTEx_SetTxFifoThreshold>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80009b0:	f000 fbcc 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4809      	ldr	r0, [pc, #36]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 80009b8:	f003 ff5e 	bl	8004878 <HAL_UARTEx_SetRxFifoThreshold>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80009c2:	f000 fbc3 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 80009c8:	f003 fedf 	bl	800478a <HAL_UARTEx_DisableFifoMode>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80009d2:	f000 fbbb 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  /* USER CODE END LPUART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000180 	.word	0x20000180
 80009e0:	40008000 	.word	0x40008000

080009e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e8:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 80009ea:	4a23      	ldr	r2, [pc, #140]	@ (8000a78 <MX_USART1_UART_Init+0x94>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a26:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a2c:	4811      	ldr	r0, [pc, #68]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a2e:	f003 f8b3 	bl	8003b98 <HAL_UART_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a38:	f000 fb88 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	480d      	ldr	r0, [pc, #52]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a40:	f003 fedc 	bl	80047fc <HAL_UARTEx_SetTxFifoThreshold>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4a:	f000 fb7f 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4808      	ldr	r0, [pc, #32]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a52:	f003 ff11 	bl	8004878 <HAL_UARTEx_SetRxFifoThreshold>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a5c:	f000 fb76 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_USART1_UART_Init+0x90>)
 8000a62:	f003 fe92 	bl	800478a <HAL_UARTEx_DisableFifoMode>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a6c:	f000 fb6e 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000214 	.word	0x20000214
 8000a78:	40013800 	.word	0x40013800

08000a7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a80:	4b22      	ldr	r3, [pc, #136]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a82:	4a23      	ldr	r2, [pc, #140]	@ (8000b10 <MX_USART3_UART_Init+0x94>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a86:	4b21      	ldr	r3, [pc, #132]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ac4:	4811      	ldr	r0, [pc, #68]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000ac6:	f003 f867 	bl	8003b98 <HAL_UART_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ad0:	f000 fb3c 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000ad8:	f003 fe90 	bl	80047fc <HAL_UARTEx_SetTxFifoThreshold>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae2:	f000 fb33 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4808      	ldr	r0, [pc, #32]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aea:	f003 fec5 	bl	8004878 <HAL_UARTEx_SetRxFifoThreshold>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000af4:	f000 fb2a 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_USART3_UART_Init+0x90>)
 8000afa:	f003 fe46 	bl	800478a <HAL_UARTEx_DisableFifoMode>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b04:	f000 fb22 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200002a8 	.word	0x200002a8
 8000b10:	40004800 	.word	0x40004800

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	@ 0x28
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c14 <MX_GPIO_Init+0x100>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a39      	ldr	r2, [pc, #228]	@ (8000c14 <MX_GPIO_Init+0x100>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b37      	ldr	r3, [pc, #220]	@ (8000c14 <MX_GPIO_Init+0x100>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b42:	4b34      	ldr	r3, [pc, #208]	@ (8000c14 <MX_GPIO_Init+0x100>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a33      	ldr	r2, [pc, #204]	@ (8000c14 <MX_GPIO_Init+0x100>)
 8000b48:	f043 0320 	orr.w	r3, r3, #32
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b31      	ldr	r3, [pc, #196]	@ (8000c14 <MX_GPIO_Init+0x100>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c14 <MX_GPIO_Init+0x100>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c14 <MX_GPIO_Init+0x100>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b2b      	ldr	r3, [pc, #172]	@ (8000c14 <MX_GPIO_Init+0x100>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b28      	ldr	r3, [pc, #160]	@ (8000c14 <MX_GPIO_Init+0x100>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4a27      	ldr	r2, [pc, #156]	@ (8000c14 <MX_GPIO_Init+0x100>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <MX_GPIO_Init+0x100>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b92:	f001 ffa7 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b9c:	481e      	ldr	r0, [pc, #120]	@ (8000c18 <MX_GPIO_Init+0x104>)
 8000b9e:	f001 ffa1 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4818      	ldr	r0, [pc, #96]	@ (8000c1c <MX_GPIO_Init+0x108>)
 8000bba:	f001 fe11 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bbe:	2320      	movs	r3, #32
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd8:	f001 fe02 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000bdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4808      	ldr	r0, [pc, #32]	@ (8000c18 <MX_GPIO_Init+0x104>)
 8000bf6:	f001 fdf3 	bl	80027e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2028      	movs	r0, #40	@ 0x28
 8000c00:	f000 ff0d 	bl	8001a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c04:	2028      	movs	r0, #40	@ 0x28
 8000c06:	f000 ff24 	bl	8001a52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	@ 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48000400 	.word	0x48000400
 8000c1c:	48000800 	.word	0x48000800

08000c20 <FDCAN_Config>:

/* USER CODE BEGIN 4 */

static void FDCAN_Config(void) {
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b08f      	sub	sp, #60	@ 0x3c
 8000c24:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;
	uint8_t filterIndex = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t filterIDs[4] = { 0x321, 0x322, 0x323, 0x324 };
 8000c2c:	4b39      	ldr	r3, [pc, #228]	@ (8000d14 <FDCAN_Config+0xf4>)
 8000c2e:	1d3c      	adds	r4, r7, #4
 8000c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Configure Rx filter */

	sFilterConfig.FilterType = FDCAN_FILTER_DUAL;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	623b      	str	r3, [r7, #32]

	for (uint8_t i = 0; i < 4; i++) {
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000c44:	e027      	b.n	8000c96 <FDCAN_Config+0x76>
		sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterIndex = filterIndex++;
 8000c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000c54:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterID1 = filterIDs[i];
 8000c56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	3330      	adds	r3, #48	@ 0x30
 8000c5e:	443b      	add	r3, r7
 8000c60:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
		sFilterConfig.FilterID2 = filterIDs[i];
 8000c66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	3330      	adds	r3, #48	@ 0x30
 8000c6e:	443b      	add	r3, r7
 8000c70:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4826      	ldr	r0, [pc, #152]	@ (8000d18 <FDCAN_Config+0xf8>)
 8000c7e:	f001 f85d 	bl	8001d3c <HAL_FDCAN_ConfigFilter>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <FDCAN_Config+0x6c>
			Error_Handler();
 8000c88:	f000 fa60 	bl	800114c <Error_Handler>
	for (uint8_t i = 0; i < 4; i++) {
 8000c8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c90:	3301      	adds	r3, #1
 8000c92:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000c96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d9d3      	bls.n	8000c46 <FDCAN_Config+0x26>
		}

	}

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000c9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ca2:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIndex = filterIndex++;
 8000ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000cae:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID1 = 0x1111112;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <FDCAN_Config+0xfc>)
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
	sFilterConfig.FilterID2 = 0x1111113;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <FDCAN_Config+0x100>)
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4816      	ldr	r0, [pc, #88]	@ (8000d18 <FDCAN_Config+0xf8>)
 8000cc0:	f001 f83c 	bl	8001d3c <HAL_FDCAN_ConfigFilter>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <FDCAN_Config+0xae>
		Error_Handler();
 8000cca:	f000 fa3f 	bl	800114c <Error_Handler>
	}

	/* Configure global filter:
	 Filter all remote frames with STD and EXT ID
	 Reject non matching frames with STD ID and EXT ID */
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT,
 8000cce:	2300      	movs	r3, #0
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	480f      	ldr	r0, [pc, #60]	@ (8000d18 <FDCAN_Config+0xf8>)
 8000cda:	f001 f889 	bl	8001df0 <HAL_FDCAN_ConfigGlobalFilter>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <FDCAN_Config+0xc8>
	FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
		Error_Handler();
 8000ce4:	f000 fa32 	bl	800114c <Error_Handler>
	}

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000ce8:	480b      	ldr	r0, [pc, #44]	@ (8000d18 <FDCAN_Config+0xf8>)
 8000cea:	f001 f8b2 	bl	8001e52 <HAL_FDCAN_Start>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <FDCAN_Config+0xd8>
		Error_Handler();
 8000cf4:	f000 fa2a 	bl	800114c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4806      	ldr	r0, [pc, #24]	@ (8000d18 <FDCAN_Config+0xf8>)
 8000cfe:	f001 fa1d 	bl	800213c <HAL_FDCAN_ActivateNotification>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <FDCAN_Config+0xec>
			0) != HAL_OK) {
		Error_Handler();
 8000d08:	f000 fa20 	bl	800114c <Error_Handler>
	}

	/* Prepare Tx Header */

}
 8000d0c:	bf00      	nop
 8000d0e:	3734      	adds	r7, #52	@ 0x34
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd90      	pop	{r4, r7, pc}
 8000d14:	080059d4 	.word	0x080059d4
 8000d18:	200000b8 	.word	0x200000b8
 8000d1c:	01111112 	.word	0x01111112
 8000d20:	01111113 	.word	0x01111113

08000d24 <FDCAN_Config2>:
static void FDCAN_Config2(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_DUAL;
 8000d32:	2301      	movs	r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000d36:	2301      	movs	r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x111;
 8000d3a:	f240 1311 	movw	r3, #273	@ 0x111
 8000d3e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x324;
 8000d40:	f44f 7349 	mov.w	r3, #804	@ 0x324
 8000d44:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8000d46:	463b      	mov	r3, r7
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4815      	ldr	r0, [pc, #84]	@ (8000da0 <FDCAN_Config2+0x7c>)
 8000d4c:	f000 fff6 	bl	8001d3c <HAL_FDCAN_ConfigFilter>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <FDCAN_Config2+0x36>
		Error_Handler();
 8000d56:	f000 f9f9 	bl	800114c <Error_Handler>
	}

	/* Configure global filter:
	 Filter all remote frames with STD and EXT ID
	 Reject non matching frames with STD ID and EXT ID */
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT,
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	2202      	movs	r2, #2
 8000d62:	2102      	movs	r1, #2
 8000d64:	480e      	ldr	r0, [pc, #56]	@ (8000da0 <FDCAN_Config2+0x7c>)
 8000d66:	f001 f843 	bl	8001df0 <HAL_FDCAN_ConfigGlobalFilter>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <FDCAN_Config2+0x50>
	FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
		Error_Handler();
 8000d70:	f000 f9ec 	bl	800114c <Error_Handler>
	}

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 8000d74:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <FDCAN_Config2+0x7c>)
 8000d76:	f001 f86c 	bl	8001e52 <HAL_FDCAN_Start>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <FDCAN_Config2+0x60>
		Error_Handler();
 8000d80:	f000 f9e4 	bl	800114c <Error_Handler>
	}
//
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000d84:	2200      	movs	r2, #0
 8000d86:	2101      	movs	r1, #1
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <FDCAN_Config2+0x7c>)
 8000d8a:	f001 f9d7 	bl	800213c <HAL_FDCAN_ActivateNotification>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <FDCAN_Config2+0x74>
			0) != HAL_OK) {
		Error_Handler();
 8000d94:	f000 f9da 	bl	800114c <Error_Handler>
	}

	/* Prepare Tx Header */

}
 8000d98:	bf00      	nop
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	2000011c 	.word	0x2000011c

08000da4 <HAL_FDCAN_RxFifo0Callback>:
 * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
 *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
 * @retval None
 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0ca      	sub	sp, #296	@ 0x128
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000dae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000db2:	6018      	str	r0, [r3, #0]
 8000db4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000db8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000dbc:	6019      	str	r1, [r3, #0]
	if (hfdcan == &hfdcan1) {
 8000dbe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000dc2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a99      	ldr	r2, [pc, #612]	@ (8001030 <HAL_FDCAN_RxFifo0Callback+0x28c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	f040 8154 	bne.w	8001078 <HAL_FDCAN_RxFifo0Callback+0x2d4>
		printf(" DATA IS COMMING ON CANFD1 ---- \n");
 8000dd0:	4898      	ldr	r0, [pc, #608]	@ (8001034 <HAL_FDCAN_RxFifo0Callback+0x290>)
 8000dd2:	f003 ff0f 	bl	8004bf4 <puts>
		if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000dd6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000dda:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 8199 	beq.w	800111c <HAL_FDCAN_RxFifo0Callback+0x378>
			/* Retrieve Rx messages from RX FIFO0 */
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader,
 8000dea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000dee:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 8000df2:	4b91      	ldr	r3, [pc, #580]	@ (8001038 <HAL_FDCAN_RxFifo0Callback+0x294>)
 8000df4:	4a91      	ldr	r2, [pc, #580]	@ (800103c <HAL_FDCAN_RxFifo0Callback+0x298>)
 8000df6:	2140      	movs	r1, #64	@ 0x40
 8000df8:	6800      	ldr	r0, [r0, #0]
 8000dfa:	f001 f897 	bl	8001f2c <HAL_FDCAN_GetRxMessage>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d007      	beq.n	8000e14 <HAL_FDCAN_RxFifo0Callback+0x70>
					RxData) != HAL_OK) {
				/* Reception Error */
				uart_putchar=uart1_putchar;
 8000e04:	4b8e      	ldr	r3, [pc, #568]	@ (8001040 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8000e06:	4a8f      	ldr	r2, [pc, #572]	@ (8001044 <HAL_FDCAN_RxFifo0Callback+0x2a0>)
 8000e08:	601a      	str	r2, [r3, #0]

				printf("error \n");
 8000e0a:	488f      	ldr	r0, [pc, #572]	@ (8001048 <HAL_FDCAN_RxFifo0Callback+0x2a4>)
 8000e0c:	f003 fef2 	bl	8004bf4 <puts>

				Error_Handler();
 8000e10:	f000 f99c 	bl	800114c <Error_Handler>
			}

			/* Display LEDx */
			if ((RxHeader.Identifier == 0x321)
 8000e14:	4b89      	ldr	r3, [pc, #548]	@ (800103c <HAL_FDCAN_RxFifo0Callback+0x298>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f240 3221 	movw	r2, #801	@ 0x321
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d126      	bne.n	8000e6e <HAL_FDCAN_RxFifo0Callback+0xca>
					&& (RxHeader.IdType == FDCAN_STANDARD_ID)) {
 8000e20:	4b86      	ldr	r3, [pc, #536]	@ (800103c <HAL_FDCAN_RxFifo0Callback+0x298>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d122      	bne.n	8000e6e <HAL_FDCAN_RxFifo0Callback+0xca>
				uart_putchar=uart1_putchar;
 8000e28:	4b85      	ldr	r3, [pc, #532]	@ (8001040 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8000e2a:	4a86      	ldr	r2, [pc, #536]	@ (8001044 <HAL_FDCAN_RxFifo0Callback+0x2a0>)
 8000e2c:	601a      	str	r2, [r3, #0]

				ubKeyNumber = RxData[0];
 8000e2e:	4b82      	ldr	r3, [pc, #520]	@ (8001038 <HAL_FDCAN_RxFifo0Callback+0x294>)
 8000e30:	781a      	ldrb	r2, [r3, #0]
 8000e32:	4b86      	ldr	r3, [pc, #536]	@ (800104c <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 8000e34:	701a      	strb	r2, [r3, #0]
				printf("CAN1 receiving CAN ID IS 0x321 ----- ");
 8000e36:	4886      	ldr	r0, [pc, #536]	@ (8001050 <HAL_FDCAN_RxFifo0Callback+0x2ac>)
 8000e38:	f003 fe6c 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000e42:	e00d      	b.n	8000e60 <HAL_FDCAN_RxFifo0Callback+0xbc>

					printf("%02X ", RxData[i]);
 8000e44:	4a7c      	ldr	r2, [pc, #496]	@ (8001038 <HAL_FDCAN_RxFifo0Callback+0x294>)
 8000e46:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4880      	ldr	r0, [pc, #512]	@ (8001054 <HAL_FDCAN_RxFifo0Callback+0x2b0>)
 8000e52:	f003 fe5f 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 8000e56:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000e60:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000e64:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e66:	dded      	ble.n	8000e44 <HAL_FDCAN_RxFifo0Callback+0xa0>

				}
				printf("\n");
 8000e68:	200a      	movs	r0, #10
 8000e6a:	f003 fe65 	bl	8004b38 <putchar>

			}
			if ((RxHeader.Identifier == 0x322)
 8000e6e:	4b73      	ldr	r3, [pc, #460]	@ (800103c <HAL_FDCAN_RxFifo0Callback+0x298>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f240 3222 	movw	r2, #802	@ 0x322
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d122      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0x11c>
					&& (RxHeader.IdType == FDCAN_STANDARD_ID)) {
 8000e7a:	4b70      	ldr	r3, [pc, #448]	@ (800103c <HAL_FDCAN_RxFifo0Callback+0x298>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11e      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0x11c>
				uart_putchar=uart1_putchar;
 8000e82:	4b6f      	ldr	r3, [pc, #444]	@ (8001040 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8000e84:	4a6f      	ldr	r2, [pc, #444]	@ (8001044 <HAL_FDCAN_RxFifo0Callback+0x2a0>)
 8000e86:	601a      	str	r2, [r3, #0]

				printf("CAN1  receiving CAN ID IS 0x322 ----- ");
 8000e88:	4873      	ldr	r0, [pc, #460]	@ (8001058 <HAL_FDCAN_RxFifo0Callback+0x2b4>)
 8000e8a:	f003 fe43 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000e94:	e00d      	b.n	8000eb2 <HAL_FDCAN_RxFifo0Callback+0x10e>

					printf("%02X ", RxData[i]);
 8000e96:	4a68      	ldr	r2, [pc, #416]	@ (8001038 <HAL_FDCAN_RxFifo0Callback+0x294>)
 8000e98:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e9c:	4413      	add	r3, r2
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	486c      	ldr	r0, [pc, #432]	@ (8001054 <HAL_FDCAN_RxFifo0Callback+0x2b0>)
 8000ea4:	f003 fe36 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 8000ea8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eac:	3301      	adds	r3, #1
 8000eae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000eb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eb6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000eb8:	dded      	ble.n	8000e96 <HAL_FDCAN_RxFifo0Callback+0xf2>

				}
				printf("\n");
 8000eba:	200a      	movs	r0, #10
 8000ebc:	f003 fe3c 	bl	8004b38 <putchar>

			}
			if ((RxHeader.Identifier == 0x323)
 8000ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800103c <HAL_FDCAN_RxFifo0Callback+0x298>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f240 3223 	movw	r2, #803	@ 0x323
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d122      	bne.n	8000f12 <HAL_FDCAN_RxFifo0Callback+0x16e>
					&& (RxHeader.IdType == FDCAN_STANDARD_ID)) {
 8000ecc:	4b5b      	ldr	r3, [pc, #364]	@ (800103c <HAL_FDCAN_RxFifo0Callback+0x298>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d11e      	bne.n	8000f12 <HAL_FDCAN_RxFifo0Callback+0x16e>
				uart_putchar=uart1_putchar;
 8000ed4:	4b5a      	ldr	r3, [pc, #360]	@ (8001040 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8000ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8001044 <HAL_FDCAN_RxFifo0Callback+0x2a0>)
 8000ed8:	601a      	str	r2, [r3, #0]

				printf("CAN1 receiving CAN ID IS 0x323 ----- ");
 8000eda:	4860      	ldr	r0, [pc, #384]	@ (800105c <HAL_FDCAN_RxFifo0Callback+0x2b8>)
 8000edc:	f003 fe1a 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000ee6:	e00d      	b.n	8000f04 <HAL_FDCAN_RxFifo0Callback+0x160>

					printf("%02X ", RxData[i]);
 8000ee8:	4a53      	ldr	r2, [pc, #332]	@ (8001038 <HAL_FDCAN_RxFifo0Callback+0x294>)
 8000eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4857      	ldr	r0, [pc, #348]	@ (8001054 <HAL_FDCAN_RxFifo0Callback+0x2b0>)
 8000ef6:	f003 fe0d 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 8000efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000efe:	3301      	adds	r3, #1
 8000f00:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000f08:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f0a:	dded      	ble.n	8000ee8 <HAL_FDCAN_RxFifo0Callback+0x144>

				}
				printf("\n");
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f003 fe13 	bl	8004b38 <putchar>

			}
			if ((RxHeader.Identifier == 0x324)
 8000f12:	4b4a      	ldr	r3, [pc, #296]	@ (800103c <HAL_FDCAN_RxFifo0Callback+0x298>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f5b3 7f49 	cmp.w	r3, #804	@ 0x324
 8000f1a:	d122      	bne.n	8000f62 <HAL_FDCAN_RxFifo0Callback+0x1be>
					&& (RxHeader.IdType == FDCAN_STANDARD_ID)) {
 8000f1c:	4b47      	ldr	r3, [pc, #284]	@ (800103c <HAL_FDCAN_RxFifo0Callback+0x298>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d11e      	bne.n	8000f62 <HAL_FDCAN_RxFifo0Callback+0x1be>
				uart_putchar=uart1_putchar;
 8000f24:	4b46      	ldr	r3, [pc, #280]	@ (8001040 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8000f26:	4a47      	ldr	r2, [pc, #284]	@ (8001044 <HAL_FDCAN_RxFifo0Callback+0x2a0>)
 8000f28:	601a      	str	r2, [r3, #0]

				printf("CAN1  receiving CAN ID IS 0x324 ----- ");
 8000f2a:	484d      	ldr	r0, [pc, #308]	@ (8001060 <HAL_FDCAN_RxFifo0Callback+0x2bc>)
 8000f2c:	f003 fdf2 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000f36:	e00d      	b.n	8000f54 <HAL_FDCAN_RxFifo0Callback+0x1b0>

					printf("%02X ", RxData[i]);
 8000f38:	4a3f      	ldr	r2, [pc, #252]	@ (8001038 <HAL_FDCAN_RxFifo0Callback+0x294>)
 8000f3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	4619      	mov	r1, r3
 8000f44:	4843      	ldr	r0, [pc, #268]	@ (8001054 <HAL_FDCAN_RxFifo0Callback+0x2b0>)
 8000f46:	f003 fde5 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 8000f4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000f4e:	3301      	adds	r3, #1
 8000f50:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000f54:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000f58:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f5a:	dded      	ble.n	8000f38 <HAL_FDCAN_RxFifo0Callback+0x194>

				}
				printf("\n");
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f003 fdeb 	bl	8004b38 <putchar>

			}
			if ((RxHeader.Identifier == 0x1111112)
 8000f62:	4b36      	ldr	r3, [pc, #216]	@ (800103c <HAL_FDCAN_RxFifo0Callback+0x298>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a3f      	ldr	r2, [pc, #252]	@ (8001064 <HAL_FDCAN_RxFifo0Callback+0x2c0>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d123      	bne.n	8000fb4 <HAL_FDCAN_RxFifo0Callback+0x210>
					&& (RxHeader.IdType == FDCAN_EXTENDED_ID)) {
 8000f6c:	4b33      	ldr	r3, [pc, #204]	@ (800103c <HAL_FDCAN_RxFifo0Callback+0x298>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f74:	d11e      	bne.n	8000fb4 <HAL_FDCAN_RxFifo0Callback+0x210>
				uart_putchar=uart1_putchar;
 8000f76:	4b32      	ldr	r3, [pc, #200]	@ (8001040 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8000f78:	4a32      	ldr	r2, [pc, #200]	@ (8001044 <HAL_FDCAN_RxFifo0Callback+0x2a0>)
 8000f7a:	601a      	str	r2, [r3, #0]

				printf("CAN1 receiving CAN ID IS 0x1111112 ----- ");
 8000f7c:	483a      	ldr	r0, [pc, #232]	@ (8001068 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8000f7e:	f003 fdc9 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000f88:	e00d      	b.n	8000fa6 <HAL_FDCAN_RxFifo0Callback+0x202>

					printf("%02X ", RxData[i]);
 8000f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8001038 <HAL_FDCAN_RxFifo0Callback+0x294>)
 8000f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f90:	4413      	add	r3, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	482f      	ldr	r0, [pc, #188]	@ (8001054 <HAL_FDCAN_RxFifo0Callback+0x2b0>)
 8000f98:	f003 fdbc 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 8000f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000faa:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fac:	dded      	ble.n	8000f8a <HAL_FDCAN_RxFifo0Callback+0x1e6>

				}
				printf("\n");
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f003 fdc2 	bl	8004b38 <putchar>

			}
			if ((RxHeader.Identifier == 0x1111113)
 8000fb4:	4b21      	ldr	r3, [pc, #132]	@ (800103c <HAL_FDCAN_RxFifo0Callback+0x298>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800106c <HAL_FDCAN_RxFifo0Callback+0x2c8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d123      	bne.n	8001006 <HAL_FDCAN_RxFifo0Callback+0x262>
					&& (RxHeader.IdType == FDCAN_EXTENDED_ID)) {
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <HAL_FDCAN_RxFifo0Callback+0x298>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fc6:	d11e      	bne.n	8001006 <HAL_FDCAN_RxFifo0Callback+0x262>
				uart_putchar=uart1_putchar;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8000fca:	4a1e      	ldr	r2, [pc, #120]	@ (8001044 <HAL_FDCAN_RxFifo0Callback+0x2a0>)
 8000fcc:	601a      	str	r2, [r3, #0]

				printf("CAN1 receiving CAN ID IS 0x1111113 ----- ");
 8000fce:	4828      	ldr	r0, [pc, #160]	@ (8001070 <HAL_FDCAN_RxFifo0Callback+0x2cc>)
 8000fd0:	f003 fda0 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000fda:	e00d      	b.n	8000ff8 <HAL_FDCAN_RxFifo0Callback+0x254>

					printf("%02X ", RxData[i]);
 8000fdc:	4a16      	ldr	r2, [pc, #88]	@ (8001038 <HAL_FDCAN_RxFifo0Callback+0x294>)
 8000fde:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481a      	ldr	r0, [pc, #104]	@ (8001054 <HAL_FDCAN_RxFifo0Callback+0x2b0>)
 8000fea:	f003 fd93 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 8000fee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000ff8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000ffc:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ffe:	dded      	ble.n	8000fdc <HAL_FDCAN_RxFifo0Callback+0x238>

				}
				printf("\n");
 8001000:	200a      	movs	r0, #10
 8001002:	f003 fd99 	bl	8004b38 <putchar>

			}
			if (HAL_FDCAN_ActivateNotification(hfdcan,
 8001006:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800100a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800100e:	2200      	movs	r2, #0
 8001010:	2101      	movs	r1, #1
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	f001 f892 	bl	800213c <HAL_FDCAN_ActivateNotification>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d07e      	beq.n	800111c <HAL_FDCAN_RxFifo0Callback+0x378>
			FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
				/* Notification Error */
				uart_putchar=uart1_putchar;
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <HAL_FDCAN_RxFifo0Callback+0x29c>)
 8001020:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <HAL_FDCAN_RxFifo0Callback+0x2a0>)
 8001022:	601a      	str	r2, [r3, #0]

				printf("error 3 \n");
 8001024:	4813      	ldr	r0, [pc, #76]	@ (8001074 <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 8001026:	f003 fde5 	bl	8004bf4 <puts>

				Error_Handler();
 800102a:	f000 f88f 	bl	800114c <Error_Handler>
			}

	}


}
 800102e:	e075      	b.n	800111c <HAL_FDCAN_RxFifo0Callback+0x378>
 8001030:	200000b8 	.word	0x200000b8
 8001034:	080059e4 	.word	0x080059e4
 8001038:	20000368 	.word	0x20000368
 800103c:	20000340 	.word	0x20000340
 8001040:	200003a4 	.word	0x200003a4
 8001044:	080005b1 	.word	0x080005b1
 8001048:	08005a08 	.word	0x08005a08
 800104c:	2000033c 	.word	0x2000033c
 8001050:	08005a10 	.word	0x08005a10
 8001054:	08005a38 	.word	0x08005a38
 8001058:	08005a40 	.word	0x08005a40
 800105c:	08005a68 	.word	0x08005a68
 8001060:	08005a90 	.word	0x08005a90
 8001064:	01111112 	.word	0x01111112
 8001068:	08005ab8 	.word	0x08005ab8
 800106c:	01111113 	.word	0x01111113
 8001070:	08005ae4 	.word	0x08005ae4
 8001074:	08005b10 	.word	0x08005b10
	} else if (hfdcan == &hfdcan2) {
 8001078:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800107c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a29      	ldr	r2, [pc, #164]	@ (8001128 <HAL_FDCAN_RxFifo0Callback+0x384>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d149      	bne.n	800111c <HAL_FDCAN_RxFifo0Callback+0x378>
		uart_putchar=uart3_putchar;
 8001088:	4b28      	ldr	r3, [pc, #160]	@ (800112c <HAL_FDCAN_RxFifo0Callback+0x388>)
 800108a:	4a29      	ldr	r2, [pc, #164]	@ (8001130 <HAL_FDCAN_RxFifo0Callback+0x38c>)
 800108c:	601a      	str	r2, [r3, #0]
		printf(" DATA IS COMMING ON CANFD2 ---- \n");
 800108e:	4829      	ldr	r0, [pc, #164]	@ (8001134 <HAL_FDCAN_RxFifo0Callback+0x390>)
 8001090:	f003 fdb0 	bl	8004bf4 <puts>
		if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8001094:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001098:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d03a      	beq.n	800111c <HAL_FDCAN_RxFifo0Callback+0x378>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader,
 80010a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80010aa:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 80010ae:	4b22      	ldr	r3, [pc, #136]	@ (8001138 <HAL_FDCAN_RxFifo0Callback+0x394>)
 80010b0:	4a22      	ldr	r2, [pc, #136]	@ (800113c <HAL_FDCAN_RxFifo0Callback+0x398>)
 80010b2:	2140      	movs	r1, #64	@ 0x40
 80010b4:	6800      	ldr	r0, [r0, #0]
 80010b6:	f000 ff39 	bl	8001f2c <HAL_FDCAN_GetRxMessage>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <HAL_FDCAN_RxFifo0Callback+0x326>
				printf(" ERROOR IS COMMING ON CANFD2 ---- \n");
 80010c0:	481f      	ldr	r0, [pc, #124]	@ (8001140 <HAL_FDCAN_RxFifo0Callback+0x39c>)
 80010c2:	f003 fd97 	bl	8004bf4 <puts>
				Error_Handler();
 80010c6:	f000 f841 	bl	800114c <Error_Handler>
		if ((RxHeader.Identifier == 0x111) && (RxHeader.IdType == FDCAN_STANDARD_ID)) {
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <HAL_FDCAN_RxFifo0Callback+0x398>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f240 1211 	movw	r2, #273	@ 0x111
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d122      	bne.n	800111c <HAL_FDCAN_RxFifo0Callback+0x378>
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_FDCAN_RxFifo0Callback+0x398>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d11e      	bne.n	800111c <HAL_FDCAN_RxFifo0Callback+0x378>
			uart_putchar=uart3_putchar;
 80010de:	4b13      	ldr	r3, [pc, #76]	@ (800112c <HAL_FDCAN_RxFifo0Callback+0x388>)
 80010e0:	4a13      	ldr	r2, [pc, #76]	@ (8001130 <HAL_FDCAN_RxFifo0Callback+0x38c>)
 80010e2:	601a      	str	r2, [r3, #0]
printf(" CAN2 receiving  CAN ID IS 0x111---- ");
 80010e4:	4817      	ldr	r0, [pc, #92]	@ (8001144 <HAL_FDCAN_RxFifo0Callback+0x3a0>)
 80010e6:	f003 fd15 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80010f0:	e00d      	b.n	800110e <HAL_FDCAN_RxFifo0Callback+0x36a>
					printf("%02X ", RxData[i]);
 80010f2:	4a11      	ldr	r2, [pc, #68]	@ (8001138 <HAL_FDCAN_RxFifo0Callback+0x394>)
 80010f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4812      	ldr	r0, [pc, #72]	@ (8001148 <HAL_FDCAN_RxFifo0Callback+0x3a4>)
 8001100:	f003 fd08 	bl	8004b14 <iprintf>
				for (int i = 0; i < size_rx; i++) {
 8001104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001108:	3301      	adds	r3, #1
 800110a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800110e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001112:	2b3f      	cmp	r3, #63	@ 0x3f
 8001114:	dded      	ble.n	80010f2 <HAL_FDCAN_RxFifo0Callback+0x34e>
				printf("\n");
 8001116:	200a      	movs	r0, #10
 8001118:	f003 fd0e 	bl	8004b38 <putchar>
}
 800111c:	bf00      	nop
 800111e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000011c 	.word	0x2000011c
 800112c:	200003a4 	.word	0x200003a4
 8001130:	080005d5 	.word	0x080005d5
 8001134:	08005b1c 	.word	0x08005b1c
 8001138:	20000368 	.word	0x20000368
 800113c:	20000340 	.word	0x20000340
 8001140:	08005b40 	.word	0x08005b40
 8001144:	08005b64 	.word	0x08005b64
 8001148:	08005a38 	.word	0x08005a38

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <HAL_MspInit+0x44>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001166:	4a0e      	ldr	r2, [pc, #56]	@ (80011a0 <HAL_MspInit+0x44>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6613      	str	r3, [r2, #96]	@ 0x60
 800116e:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <HAL_MspInit+0x44>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <HAL_MspInit+0x44>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <HAL_MspInit+0x44>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001184:	6593      	str	r3, [r2, #88]	@ 0x58
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_MspInit+0x44>)
 8001188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001192:	f001 fd87 	bl	8002ca4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000

080011a4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0a0      	sub	sp, #128	@ 0x80
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	2250      	movs	r2, #80	@ 0x50
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fdf5 	bl	8004db4 <memset>
  if(hfdcan->Instance==FDCAN1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a51      	ldr	r2, [pc, #324]	@ (8001314 <HAL_FDCAN_MspInit+0x170>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d14b      	bne.n	800126c <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80011da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011de:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 fa9b 	bl	8003720 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80011f0:	f7ff ffac 	bl	800114c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80011f4:	4b48      	ldr	r3, [pc, #288]	@ (8001318 <HAL_FDCAN_MspInit+0x174>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a47      	ldr	r2, [pc, #284]	@ (8001318 <HAL_FDCAN_MspInit+0x174>)
 80011fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80011fe:	4b46      	ldr	r3, [pc, #280]	@ (8001318 <HAL_FDCAN_MspInit+0x174>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d10b      	bne.n	800121e <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001206:	4b45      	ldr	r3, [pc, #276]	@ (800131c <HAL_FDCAN_MspInit+0x178>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120a:	4a44      	ldr	r2, [pc, #272]	@ (800131c <HAL_FDCAN_MspInit+0x178>)
 800120c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001210:	6593      	str	r3, [r2, #88]	@ 0x58
 8001212:	4b42      	ldr	r3, [pc, #264]	@ (800131c <HAL_FDCAN_MspInit+0x178>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b3f      	ldr	r3, [pc, #252]	@ (800131c <HAL_FDCAN_MspInit+0x178>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a3e      	ldr	r2, [pc, #248]	@ (800131c <HAL_FDCAN_MspInit+0x178>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b3c      	ldr	r3, [pc, #240]	@ (800131c <HAL_FDCAN_MspInit+0x178>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001236:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800123a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001248:	2309      	movs	r3, #9
 800124a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001250:	4619      	mov	r1, r3
 8001252:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001256:	f001 fac3 	bl	80027e0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2015      	movs	r0, #21
 8001260:	f000 fbdd 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001264:	2015      	movs	r0, #21
 8001266:	f000 fbf4 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800126a:	e04e      	b.n	800130a <HAL_FDCAN_MspInit+0x166>
  else if(hfdcan->Instance==FDCAN2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a2b      	ldr	r2, [pc, #172]	@ (8001320 <HAL_FDCAN_MspInit+0x17c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d149      	bne.n	800130a <HAL_FDCAN_MspInit+0x166>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001276:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800127c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001280:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4618      	mov	r0, r3
 8001288:	f002 fa4a 	bl	8003720 <HAL_RCCEx_PeriphCLKConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 8001292:	f7ff ff5b 	bl	800114c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_FDCAN_MspInit+0x174>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a1e      	ldr	r2, [pc, #120]	@ (8001318 <HAL_FDCAN_MspInit+0x174>)
 800129e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <HAL_FDCAN_MspInit+0x174>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10b      	bne.n	80012c0 <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80012a8:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <HAL_FDCAN_MspInit+0x178>)
 80012aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ac:	4a1b      	ldr	r2, [pc, #108]	@ (800131c <HAL_FDCAN_MspInit+0x178>)
 80012ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_FDCAN_MspInit+0x178>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b16      	ldr	r3, [pc, #88]	@ (800131c <HAL_FDCAN_MspInit+0x178>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c4:	4a15      	ldr	r2, [pc, #84]	@ (800131c <HAL_FDCAN_MspInit+0x178>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <HAL_FDCAN_MspInit+0x178>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012d8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80012dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80012ea:	2309      	movs	r3, #9
 80012ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012f2:	4619      	mov	r1, r3
 80012f4:	480b      	ldr	r0, [pc, #44]	@ (8001324 <HAL_FDCAN_MspInit+0x180>)
 80012f6:	f001 fa73 	bl	80027e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2056      	movs	r0, #86	@ 0x56
 8001300:	f000 fb8d 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001304:	2056      	movs	r0, #86	@ 0x56
 8001306:	f000 fba4 	bl	8001a52 <HAL_NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3780      	adds	r7, #128	@ 0x80
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40006400 	.word	0x40006400
 8001318:	200003a8 	.word	0x200003a8
 800131c:	40021000 	.word	0x40021000
 8001320:	40006800 	.word	0x40006800
 8001324:	48000400 	.word	0x48000400

08001328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b0a2      	sub	sp, #136	@ 0x88
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001344:	2250      	movs	r2, #80	@ 0x50
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f003 fd33 	bl	8004db4 <memset>
  if(huart->Instance==LPUART1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a5e      	ldr	r2, [pc, #376]	@ (80014cc <HAL_UART_MspInit+0x1a4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d139      	bne.n	80013cc <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001358:	2320      	movs	r3, #32
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800135c:	2300      	movs	r3, #0
 800135e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001364:	4618      	mov	r0, r3
 8001366:	f002 f9db 	bl	8003720 <HAL_RCCEx_PeriphCLKConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001370:	f7ff feec 	bl	800114c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001374:	4b56      	ldr	r3, [pc, #344]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 8001376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001378:	4a55      	ldr	r2, [pc, #340]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001380:	4b53      	ldr	r3, [pc, #332]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 8001382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b50      	ldr	r3, [pc, #320]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	4a4f      	ldr	r2, [pc, #316]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001398:	4b4d      	ldr	r3, [pc, #308]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80013a4:	230c      	movs	r3, #12
 80013a6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80013b6:	230c      	movs	r3, #12
 80013b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013c0:	4619      	mov	r1, r3
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c6:	f001 fa0b 	bl	80027e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ca:	e07b      	b.n	80014c4 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a40      	ldr	r2, [pc, #256]	@ (80014d4 <HAL_UART_MspInit+0x1ac>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d138      	bne.n	8001448 <HAL_UART_MspInit+0x120>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 f99c 	bl	8003720 <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_UART_MspInit+0xca>
      Error_Handler();
 80013ee:	f7ff fead 	bl	800114c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f2:	4b37      	ldr	r3, [pc, #220]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 80013f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f6:	4a36      	ldr	r2, [pc, #216]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013fe:	4b34      	ldr	r3, [pc, #208]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	4b31      	ldr	r3, [pc, #196]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	4a30      	ldr	r2, [pc, #192]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001416:	4b2e      	ldr	r3, [pc, #184]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001422:	2330      	movs	r3, #48	@ 0x30
 8001424:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001434:	2307      	movs	r3, #7
 8001436:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800143e:	4619      	mov	r1, r3
 8001440:	4825      	ldr	r0, [pc, #148]	@ (80014d8 <HAL_UART_MspInit+0x1b0>)
 8001442:	f001 f9cd 	bl	80027e0 <HAL_GPIO_Init>
}
 8001446:	e03d      	b.n	80014c4 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART3)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a23      	ldr	r2, [pc, #140]	@ (80014dc <HAL_UART_MspInit+0x1b4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d138      	bne.n	80014c4 <HAL_UART_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001452:	2304      	movs	r3, #4
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001456:	2300      	movs	r3, #0
 8001458:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145e:	4618      	mov	r0, r3
 8001460:	f002 f95e 	bl	8003720 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_UART_MspInit+0x146>
      Error_Handler();
 800146a:	f7ff fe6f 	bl	800114c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800146e:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 8001470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001472:	4a17      	ldr	r2, [pc, #92]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 8001474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001478:	6593      	str	r3, [r2, #88]	@ 0x58
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a11      	ldr	r2, [pc, #68]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <HAL_UART_MspInit+0x1a8>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800149e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014a2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b2:	2307      	movs	r3, #7
 80014b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014bc:	4619      	mov	r1, r3
 80014be:	4808      	ldr	r0, [pc, #32]	@ (80014e0 <HAL_UART_MspInit+0x1b8>)
 80014c0:	f001 f98e 	bl	80027e0 <HAL_GPIO_Init>
}
 80014c4:	bf00      	nop
 80014c6:	3788      	adds	r7, #136	@ 0x88
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40008000 	.word	0x40008000
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40013800 	.word	0x40013800
 80014d8:	48000800 	.word	0x48000800
 80014dc:	40004800 	.word	0x40004800
 80014e0:	48000400 	.word	0x48000400

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <NMI_Handler+0x4>

080014ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <MemManage_Handler+0x4>

080014fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <UsageFault_Handler+0x4>

0800150c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 f955 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001548:	4803      	ldr	r0, [pc, #12]	@ (8001558 <FDCAN1_IT0_IRQHandler+0x14>)
 800154a:	f000 fedd 	bl	8002308 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800154e:	4803      	ldr	r0, [pc, #12]	@ (800155c <FDCAN1_IT0_IRQHandler+0x18>)
 8001550:	f000 feda 	bl	8002308 <HAL_FDCAN_IRQHandler>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200000b8 	.word	0x200000b8
 800155c:	2000011c 	.word	0x2000011c

08001560 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001564:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001568:	f001 fad4 	bl	8002b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001574:	4802      	ldr	r0, [pc, #8]	@ (8001580 <FDCAN2_IT0_IRQHandler+0x10>)
 8001576:	f000 fec7 	bl	8002308 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000011c 	.word	0x2000011c

08001584 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e00a      	b.n	80015ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001596:	f3af 8000 	nop.w
 800159a:	4601      	mov	r1, r0
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	b2ca      	uxtb	r2, r1
 80015a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf0      	blt.n	8001596 <_read+0x12>
  }

  return len;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e009      	b.n	80015e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	60ba      	str	r2, [r7, #8]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff f80d 	bl	80005f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbf1      	blt.n	80015d0 <_write+0x12>
  }
  return len;
 80015ec:	687b      	ldr	r3, [r7, #4]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_close>:

int _close(int file)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800161e:	605a      	str	r2, [r3, #4]
  return 0;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_isatty>:

int _isatty(int file)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	@ (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d207      	bcs.n	80016a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001690:	f003 fbde 	bl	8004e50 <__errno>
 8001694:	4603      	mov	r3, r0
 8001696:	220c      	movs	r2, #12
 8001698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e009      	b.n	80016b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a6:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a05      	ldr	r2, [pc, #20]	@ (80016c4 <_sbrk+0x64>)
 80016b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2001c000 	.word	0x2001c000
 80016c0:	00000400 	.word	0x00000400
 80016c4:	200003ac 	.word	0x200003ac
 80016c8:	20000500 	.word	0x20000500

080016cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <SystemInit+0x20>)
 80016d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <SystemInit+0x20>)
 80016d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016f0:	480d      	ldr	r0, [pc, #52]	@ (8001728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f4:	f7ff ffea 	bl	80016cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <LoopForever+0x6>)
  ldr r1, =_edata
 80016fa:	490d      	ldr	r1, [pc, #52]	@ (8001730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <LoopForever+0xe>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001710:	4c0a      	ldr	r4, [pc, #40]	@ (800173c <LoopForever+0x16>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f003 fb9d 	bl	8004e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001722:	f7fe ffa9 	bl	8000678 <main>

08001726 <LoopForever>:

LoopForever:
    b LoopForever
 8001726:	e7fe      	b.n	8001726 <LoopForever>
  ldr   r0, =_estack
 8001728:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001734:	08005c20 	.word	0x08005c20
  ldr r2, =_sbss
 8001738:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800173c:	20000500 	.word	0x20000500

08001740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC1_2_IRQHandler>

08001742 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f95b 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f80e 	bl	8001774 <HAL_InitTick>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	71fb      	strb	r3, [r7, #7]
 8001762:	e001      	b.n	8001768 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001764:	f7ff fcfa 	bl	800115c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001768:	79fb      	ldrb	r3, [r7, #7]

}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001780:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <HAL_InitTick+0x68>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d022      	beq.n	80017ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_InitTick+0x6c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <HAL_InitTick+0x68>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001794:	fbb1 f3f3 	udiv	r3, r1, r3
 8001798:	fbb2 f3f3 	udiv	r3, r2, r3
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f966 	bl	8001a6e <HAL_SYSTICK_Config>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10f      	bne.n	80017c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	d809      	bhi.n	80017c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ae:	2200      	movs	r2, #0
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	f04f 30ff 	mov.w	r0, #4294967295
 80017b6:	f000 f932 	bl	8001a1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <HAL_InitTick+0x70>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e007      	b.n	80017d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e004      	b.n	80017d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e001      	b.n	80017d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	2000003c 	.word	0x2000003c
 80017e0:	20000034 	.word	0x20000034
 80017e4:	20000038 	.word	0x20000038

080017e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <HAL_IncTick+0x1c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_IncTick+0x20>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a03      	ldr	r2, [pc, #12]	@ (8001804 <HAL_IncTick+0x1c>)
 80017f8:	6013      	str	r3, [r2, #0]
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	200003b0 	.word	0x200003b0
 8001808:	2000003c 	.word	0x2000003c

0800180c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return uwTick;
 8001810:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <HAL_GetTick+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	200003b0 	.word	0x200003b0

08001824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff ffee 	bl	800180c <HAL_GetTick>
 8001830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183c:	d004      	beq.n	8001848 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_Delay+0x40>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001848:	bf00      	nop
 800184a:	f7ff ffdf 	bl	800180c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	429a      	cmp	r2, r3
 8001858:	d8f7      	bhi.n	800184a <HAL_Delay+0x26>
  {
  }
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000003c 	.word	0x2000003c

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	@ (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	@ (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	@ (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	@ 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	@ 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff29 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2c:	f7ff ff40 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff90 	bl	800195c <NVIC_EncodePriority>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5f 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff33 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffa4 	bl	80019c4 <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e147      	b.n	8001d2a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fb78 	bl	80011a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0210 	bic.w	r2, r2, #16
 8001ac2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac4:	f7ff fea2 	bl	800180c <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001aca:	e012      	b.n	8001af2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001acc:	f7ff fe9e 	bl	800180c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b0a      	cmp	r3, #10
 8001ad8:	d90b      	bls.n	8001af2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ade:	f043 0201 	orr.w	r2, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e11b      	b.n	8001d2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d0e5      	beq.n	8001acc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b10:	f7ff fe7c 	bl	800180c <HAL_GetTick>
 8001b14:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001b16:	e012      	b.n	8001b3e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001b18:	f7ff fe78 	bl	800180c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b0a      	cmp	r3, #10
 8001b24:	d90b      	bls.n	8001b3e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2203      	movs	r2, #3
 8001b36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0f5      	b.n	8001d2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0e5      	beq.n	8001b18 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0202 	orr.w	r2, r2, #2
 8001b5a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a74      	ldr	r2, [pc, #464]	@ (8001d34 <HAL_FDCAN_Init+0x2ac>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d103      	bne.n	8001b6e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001b66:	4a74      	ldr	r2, [pc, #464]	@ (8001d38 <HAL_FDCAN_Init+0x2b0>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7c1b      	ldrb	r3, [r3, #16]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d108      	bne.n	8001b88 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b84:	619a      	str	r2, [r3, #24]
 8001b86:	e007      	b.n	8001b98 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b96:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7c5b      	ldrb	r3, [r3, #17]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d108      	bne.n	8001bb2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bae:	619a      	str	r2, [r3, #24]
 8001bb0:	e007      	b.n	8001bc2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001bc0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7c9b      	ldrb	r3, [r3, #18]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d108      	bne.n	8001bdc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001bd8:	619a      	str	r2, [r3, #24]
 8001bda:	e007      	b.n	8001bec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001bea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699a      	ldr	r2, [r3, #24]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001c10:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0210 	bic.w	r2, r2, #16
 8001c20:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d108      	bne.n	8001c3c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	699a      	ldr	r2, [r3, #24]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0204 	orr.w	r2, r2, #4
 8001c38:	619a      	str	r2, [r3, #24]
 8001c3a:	e02c      	b.n	8001c96 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d028      	beq.n	8001c96 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d01c      	beq.n	8001c86 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c5a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0210 	orr.w	r2, r2, #16
 8001c6a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d110      	bne.n	8001c96 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0220 	orr.w	r2, r2, #32
 8001c82:	619a      	str	r2, [r3, #24]
 8001c84:	e007      	b.n	8001c96 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699a      	ldr	r2, [r3, #24]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0220 	orr.w	r2, r2, #32
 8001c94:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ca6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001cae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001cbe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001cc0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001cca:	d115      	bne.n	8001cf8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001cda:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001ce4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	3b01      	subs	r3, #1
 8001cee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001cf4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001cf6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fc88 	bl	8002624 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40006400 	.word	0x40006400
 8001d38:	40006500 	.word	0x40006500

08001d3c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001d4c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d002      	beq.n	8001d5a <HAL_FDCAN_ConfigFilter+0x1e>
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d13d      	bne.n	8001dd6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d119      	bne.n	8001d96 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d6e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001d76:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e01d      	b.n	8001dd2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	075a      	lsls	r2, r3, #29
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	079a      	lsls	r2, r3, #30
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e006      	b.n	8001de4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dda:	f043 0202 	orr.w	r2, r3, #2
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
  }
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d116      	bne.n	8001e38 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e12:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	011a      	lsls	r2, r3, #4
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	431a      	orrs	r2, r3
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e006      	b.n	8001e46 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3c:	f043 0204 	orr.w	r2, r3, #4
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
  }
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d110      	bne.n	8001e88 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e006      	b.n	8001e96 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e8c:	f043 0204 	orr.w	r2, r3, #4
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
  }
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d12c      	bne.n	8001f14 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ece:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e023      	b.n	8001f22 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001ee2:	0c1b      	lsrs	r3, r3, #16
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	68b9      	ldr	r1, [r7, #8]
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fbf9 	bl	80026e8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2101      	movs	r1, #1
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	fa01 f202 	lsl.w	r2, r1, r2
 8001f02:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001f06:	2201      	movs	r2, #1
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e006      	b.n	8001f22 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f18:	f043 0208 	orr.w	r2, r3, #8
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
  }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b08b      	sub	sp, #44	@ 0x2c
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f44:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001f46:	7efb      	ldrb	r3, [r7, #27]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	f040 80e8 	bne.w	800211e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b40      	cmp	r3, #64	@ 0x40
 8001f52:	d137      	bne.n	8001fc4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d107      	bne.n	8001f74 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0db      	b.n	800212c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7c:	0e1b      	lsrs	r3, r3, #24
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d10a      	bne.n	8001f9c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f8e:	0a5b      	lsrs	r3, r3, #9
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc2:	e036      	b.n	8002032 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0a3      	b.n	800212c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fec:	0e1b      	lsrs	r3, r3, #24
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d10a      	bne.n	800200c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002008:	2301      	movs	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d107      	bne.n	8002056 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	0c9b      	lsrs	r3, r3, #18
 800204c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e005      	b.n	8002062 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	3304      	adds	r3, #4
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	b29a      	uxth	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0c1b      	lsrs	r3, r3, #16
 8002090:	f003 020f 	and.w	r2, r3, #15
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0e1b      	lsrs	r3, r3, #24
 80020b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	0fda      	lsrs	r2, r3, #31
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80020c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ca:	3304      	adds	r3, #4
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
 80020d6:	e00a      	b.n	80020ee <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	441a      	add	r2, r3
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	440b      	add	r3, r1
 80020e4:	7812      	ldrb	r2, [r2, #0]
 80020e6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	3301      	adds	r3, #1
 80020ec:	623b      	str	r3, [r7, #32]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	4a11      	ldr	r2, [pc, #68]	@ (8002138 <HAL_FDCAN_GetRxMessage+0x20c>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	461a      	mov	r2, r3
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d3ec      	bcc.n	80020d8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b40      	cmp	r3, #64	@ 0x40
 8002102:	d105      	bne.n	8002110 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800210e:	e004      	b.n	800211a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e006      	b.n	800212c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002122:	f043 0208 	orr.w	r2, r3, #8
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
  }
}
 800212c:	4618      	mov	r0, r3
 800212e:	372c      	adds	r7, #44	@ 0x2c
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	08005ba4 	.word	0x08005ba4

0800213c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800214e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002150:	7dfb      	ldrb	r3, [r7, #23]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d003      	beq.n	800215e <HAL_FDCAN_ActivateNotification+0x22>
 8002156:	7dfb      	ldrb	r3, [r7, #23]
 8002158:	2b02      	cmp	r3, #2
 800215a:	f040 80c8 	bne.w	80022ee <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	2b00      	cmp	r3, #0
 800216e:	d004      	beq.n	800217a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d03b      	beq.n	80021f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002180:	2b00      	cmp	r3, #0
 8002182:	d004      	beq.n	800218e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d031      	beq.n	80021f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002194:	2b00      	cmp	r3, #0
 8002196:	d004      	beq.n	80021a2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d027      	beq.n	80021f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01d      	beq.n	80021f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d013      	beq.n	80021f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d004      	beq.n	80021de <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f003 0320 	and.w	r3, r3, #32
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00c      	beq.n	8002202 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d107      	bne.n	8002202 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d13b      	bne.n	800228e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d131      	bne.n	800228e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d127      	bne.n	800228e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002244:	2b00      	cmp	r3, #0
 8002246:	d004      	beq.n	8002252 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d11d      	bne.n	800228e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002258:	2b00      	cmp	r3, #0
 800225a:	d004      	beq.n	8002266 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d113      	bne.n	800228e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800226c:	2b00      	cmp	r3, #0
 800226e:	d004      	beq.n	800227a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00c      	beq.n	800229e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0202 	orr.w	r2, r2, #2
 800229c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d009      	beq.n	80022bc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e006      	b.n	80022fc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f2:	f043 0202 	orr.w	r2, r3, #2
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
  }
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08c      	sub	sp, #48	@ 0x30
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002316:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800231a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002324:	4013      	ands	r3, r2
 8002326:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800233c:	4013      	ands	r3, r2
 800233e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002354:	4013      	ands	r3, r2
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800235e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002362:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236a:	6a3a      	ldr	r2, [r7, #32]
 800236c:	4013      	ands	r3, r2
 800236e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002376:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800237a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	4013      	ands	r3, r2
 8002386:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002396:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00b      	beq.n	80023ba <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2240      	movs	r2, #64	@ 0x40
 80023b2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f916 	bl	80025e6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d019      	beq.n	80023f8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d014      	beq.n	80023f8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023d6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80023f0:	6939      	ldr	r1, [r7, #16]
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f8d8 	bl	80025a8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80023f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002404:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002406:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f8a2 	bl	8002552 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800240e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800241a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800241c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe fcc0 	bl	8000da4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002430:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002432:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f897 	bl	8002568 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00c      	beq.n	800245e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002456:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f890 	bl	800257e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002464:	2b00      	cmp	r3, #0
 8002466:	d018      	beq.n	800249a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246e:	2b00      	cmp	r3, #0
 8002470:	d013      	beq.n	800249a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800247a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2280      	movs	r2, #128	@ 0x80
 8002490:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002492:	68f9      	ldr	r1, [r7, #12]
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f87c 	bl	8002592 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00c      	beq.n	80024be <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f880 	bl	80025be <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00c      	beq.n	80024e2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80024da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f878 	bl	80025d2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00f      	beq.n	800250c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002504:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800251a:	69f9      	ldr	r1, [r7, #28]
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f876 	bl	800260e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d009      	beq.n	800253c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6a3a      	ldr	r2, [r7, #32]
 800252e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f858 	bl	80025fa <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800254a:	bf00      	nop
 800254c:	3730      	adds	r7, #48	@ 0x30
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800262c:	4b2c      	ldr	r3, [pc, #176]	@ (80026e0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800262e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a2b      	ldr	r2, [pc, #172]	@ (80026e4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d103      	bne.n	8002642 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002640:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002650:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002658:	041a      	lsls	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002676:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267e:	061a      	lsls	r2, r3, #24
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e005      	b.n	80026c4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3304      	adds	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d3f3      	bcc.n	80026b8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	4000a400 	.word	0x4000a400
 80026e4:	40006800 	.word	0x40006800

080026e8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	@ 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002706:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800270e:	4313      	orrs	r3, r2
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	e00a      	b.n	800272a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800271c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002722:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002724:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002728:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002734:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800273a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002740:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	3304      	adds	r3, #4
 8002768:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	3304      	adds	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	e020      	b.n	80027be <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	3303      	adds	r3, #3
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	4413      	add	r3, r2
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3302      	adds	r3, #2
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	440b      	add	r3, r1
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002794:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3301      	adds	r3, #1
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	440b      	add	r3, r1
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80027a2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	440a      	add	r2, r1
 80027aa:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80027ac:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	3304      	adds	r3, #4
 80027b6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	3304      	adds	r3, #4
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	4a06      	ldr	r2, [pc, #24]	@ (80027dc <FDCAN_CopyMessageToRAM+0xf4>)
 80027c4:	5cd3      	ldrb	r3, [r2, r3]
 80027c6:	461a      	mov	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d3d6      	bcc.n	800277c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80027ce:	bf00      	nop
 80027d0:	bf00      	nop
 80027d2:	3724      	adds	r7, #36	@ 0x24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	08005ba4 	.word	0x08005ba4

080027e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027ee:	e15a      	b.n	8002aa6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2101      	movs	r1, #1
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 814c 	beq.w	8002aa0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d005      	beq.n	8002820 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800281c:	2b02      	cmp	r3, #2
 800281e:	d130      	bne.n	8002882 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002856:	2201      	movs	r2, #1
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f003 0201 	and.w	r2, r3, #1
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b03      	cmp	r3, #3
 800288c:	d017      	beq.n	80028be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d123      	bne.n	8002912 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	08da      	lsrs	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3208      	adds	r2, #8
 80028d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	220f      	movs	r2, #15
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	08da      	lsrs	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3208      	adds	r2, #8
 800290c:	6939      	ldr	r1, [r7, #16]
 800290e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	2203      	movs	r2, #3
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0203 	and.w	r2, r3, #3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80a6 	beq.w	8002aa0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002954:	4b5b      	ldr	r3, [pc, #364]	@ (8002ac4 <HAL_GPIO_Init+0x2e4>)
 8002956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002958:	4a5a      	ldr	r2, [pc, #360]	@ (8002ac4 <HAL_GPIO_Init+0x2e4>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002960:	4b58      	ldr	r3, [pc, #352]	@ (8002ac4 <HAL_GPIO_Init+0x2e4>)
 8002962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296c:	4a56      	ldr	r2, [pc, #344]	@ (8002ac8 <HAL_GPIO_Init+0x2e8>)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	220f      	movs	r2, #15
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002996:	d01f      	beq.n	80029d8 <HAL_GPIO_Init+0x1f8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a4c      	ldr	r2, [pc, #304]	@ (8002acc <HAL_GPIO_Init+0x2ec>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d019      	beq.n	80029d4 <HAL_GPIO_Init+0x1f4>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a4b      	ldr	r2, [pc, #300]	@ (8002ad0 <HAL_GPIO_Init+0x2f0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d013      	beq.n	80029d0 <HAL_GPIO_Init+0x1f0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a4a      	ldr	r2, [pc, #296]	@ (8002ad4 <HAL_GPIO_Init+0x2f4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00d      	beq.n	80029cc <HAL_GPIO_Init+0x1ec>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a49      	ldr	r2, [pc, #292]	@ (8002ad8 <HAL_GPIO_Init+0x2f8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d007      	beq.n	80029c8 <HAL_GPIO_Init+0x1e8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a48      	ldr	r2, [pc, #288]	@ (8002adc <HAL_GPIO_Init+0x2fc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_GPIO_Init+0x1e4>
 80029c0:	2305      	movs	r3, #5
 80029c2:	e00a      	b.n	80029da <HAL_GPIO_Init+0x1fa>
 80029c4:	2306      	movs	r3, #6
 80029c6:	e008      	b.n	80029da <HAL_GPIO_Init+0x1fa>
 80029c8:	2304      	movs	r3, #4
 80029ca:	e006      	b.n	80029da <HAL_GPIO_Init+0x1fa>
 80029cc:	2303      	movs	r3, #3
 80029ce:	e004      	b.n	80029da <HAL_GPIO_Init+0x1fa>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e002      	b.n	80029da <HAL_GPIO_Init+0x1fa>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <HAL_GPIO_Init+0x1fa>
 80029d8:	2300      	movs	r3, #0
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	f002 0203 	and.w	r2, r2, #3
 80029e0:	0092      	lsls	r2, r2, #2
 80029e2:	4093      	lsls	r3, r2
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029ea:	4937      	ldr	r1, [pc, #220]	@ (8002ac8 <HAL_GPIO_Init+0x2e8>)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	3302      	adds	r3, #2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029f8:	4b39      	ldr	r3, [pc, #228]	@ (8002ae0 <HAL_GPIO_Init+0x300>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a1c:	4a30      	ldr	r2, [pc, #192]	@ (8002ae0 <HAL_GPIO_Init+0x300>)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a22:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae0 <HAL_GPIO_Init+0x300>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a46:	4a26      	ldr	r2, [pc, #152]	@ (8002ae0 <HAL_GPIO_Init+0x300>)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ae0 <HAL_GPIO_Init+0x300>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae0 <HAL_GPIO_Init+0x300>)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae0 <HAL_GPIO_Init+0x300>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a9a:	4a11      	ldr	r2, [pc, #68]	@ (8002ae0 <HAL_GPIO_Init+0x300>)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f47f ae9d 	bne.w	80027f0 <HAL_GPIO_Init+0x10>
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	48000400 	.word	0x48000400
 8002ad0:	48000800 	.word	0x48000800
 8002ad4:	48000c00 	.word	0x48000c00
 8002ad8:	48001000 	.word	0x48001000
 8002adc:	48001400 	.word	0x48001400
 8002ae0:	40010400 	.word	0x40010400

08002ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]
 8002af0:	4613      	mov	r3, r2
 8002af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002af4:	787b      	ldrb	r3, [r7, #1]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b00:	e002      	b.n	8002b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b02:	887a      	ldrh	r2, [r7, #2]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b1e:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b2a:	4a05      	ldr	r2, [pc, #20]	@ (8002b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f806 	bl	8002b44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40010400 	.word	0x40010400

08002b44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d141      	bne.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b76:	d131      	bne.n	8002bdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b78:	4b47      	ldr	r3, [pc, #284]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b7e:	4a46      	ldr	r2, [pc, #280]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b88:	4b43      	ldr	r3, [pc, #268]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b90:	4a41      	ldr	r2, [pc, #260]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b98:	4b40      	ldr	r3, [pc, #256]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2232      	movs	r2, #50	@ 0x32
 8002b9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ba2:	4a3f      	ldr	r2, [pc, #252]	@ (8002ca0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	0c9b      	lsrs	r3, r3, #18
 8002baa:	3301      	adds	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bae:	e002      	b.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb6:	4b38      	ldr	r3, [pc, #224]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc2:	d102      	bne.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f2      	bne.n	8002bb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bca:	4b33      	ldr	r3, [pc, #204]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bd6:	d158      	bne.n	8002c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e057      	b.n	8002c8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002be2:	4a2d      	ldr	r2, [pc, #180]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002be8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bec:	e04d      	b.n	8002c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bf4:	d141      	bne.n	8002c7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bf6:	4b28      	ldr	r3, [pc, #160]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c02:	d131      	bne.n	8002c68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c04:	4b24      	ldr	r3, [pc, #144]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c0a:	4a23      	ldr	r2, [pc, #140]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c14:	4b20      	ldr	r3, [pc, #128]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c24:	4b1d      	ldr	r3, [pc, #116]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2232      	movs	r2, #50	@ 0x32
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	0c9b      	lsrs	r3, r3, #18
 8002c36:	3301      	adds	r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3a:	e002      	b.n	8002c42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c4e:	d102      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f2      	bne.n	8002c3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c56:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c62:	d112      	bne.n	8002c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e011      	b.n	8002c8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c78:	e007      	b.n	8002c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c7a:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c82:	4a05      	ldr	r2, [pc, #20]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c88:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	20000034 	.word	0x20000034
 8002ca0:	431bde83 	.word	0x431bde83

08002ca4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ca8:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a04      	ldr	r2, [pc, #16]	@ (8002cc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cb2:	6093      	str	r3, [r2, #8]
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40007000 	.word	0x40007000

08002cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e2fe      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d075      	beq.n	8002dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce2:	4b97      	ldr	r3, [pc, #604]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cec:	4b94      	ldr	r3, [pc, #592]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b0c      	cmp	r3, #12
 8002cfa:	d102      	bne.n	8002d02 <HAL_RCC_OscConfig+0x3e>
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_OscConfig+0x44>
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d10b      	bne.n	8002d20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	4b8d      	ldr	r3, [pc, #564]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d05b      	beq.n	8002dcc <HAL_RCC_OscConfig+0x108>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d157      	bne.n	8002dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e2d9      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d28:	d106      	bne.n	8002d38 <HAL_RCC_OscConfig+0x74>
 8002d2a:	4b85      	ldr	r3, [pc, #532]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a84      	ldr	r2, [pc, #528]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e01d      	b.n	8002d74 <HAL_RCC_OscConfig+0xb0>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x98>
 8002d42:	4b7f      	ldr	r3, [pc, #508]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a7e      	ldr	r2, [pc, #504]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7b      	ldr	r2, [pc, #492]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0xb0>
 8002d5c:	4b78      	ldr	r3, [pc, #480]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a77      	ldr	r2, [pc, #476]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b75      	ldr	r3, [pc, #468]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a74      	ldr	r2, [pc, #464]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fd46 	bl	800180c <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe fd42 	bl	800180c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	@ 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e29e      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d96:	4b6a      	ldr	r3, [pc, #424]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0xc0>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe fd32 	bl	800180c <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fe fd2e 	bl	800180c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	@ 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e28a      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dbe:	4b60      	ldr	r3, [pc, #384]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0xe8>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d075      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dda:	4b59      	ldr	r3, [pc, #356]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de4:	4b56      	ldr	r3, [pc, #344]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2b0c      	cmp	r3, #12
 8002df2:	d102      	bne.n	8002dfa <HAL_RCC_OscConfig+0x136>
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d002      	beq.n	8002e00 <HAL_RCC_OscConfig+0x13c>
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d11f      	bne.n	8002e40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e00:	4b4f      	ldr	r3, [pc, #316]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_OscConfig+0x154>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e25d      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e18:	4b49      	ldr	r3, [pc, #292]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	061b      	lsls	r3, r3, #24
 8002e26:	4946      	ldr	r1, [pc, #280]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e2c:	4b45      	ldr	r3, [pc, #276]	@ (8002f44 <HAL_RCC_OscConfig+0x280>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe fc9f 	bl	8001774 <HAL_InitTick>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d043      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e249      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d023      	beq.n	8002e90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e48:	4b3d      	ldr	r3, [pc, #244]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe fcda 	bl	800180c <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5c:	f7fe fcd6 	bl	800180c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e232      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6e:	4b34      	ldr	r3, [pc, #208]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7a:	4b31      	ldr	r3, [pc, #196]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	061b      	lsls	r3, r3, #24
 8002e88:	492d      	ldr	r1, [pc, #180]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	604b      	str	r3, [r1, #4]
 8002e8e:	e01a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e90:	4b2b      	ldr	r3, [pc, #172]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a2a      	ldr	r2, [pc, #168]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002e96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fcb6 	bl	800180c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea4:	f7fe fcb2 	bl	800180c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e20e      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eb6:	4b22      	ldr	r3, [pc, #136]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x1e0>
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d041      	beq.n	8002f56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eda:	4b19      	ldr	r3, [pc, #100]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ee0:	4a17      	ldr	r2, [pc, #92]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7fe fc8f 	bl	800180c <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef2:	f7fe fc8b 	bl	800180c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e1e7      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f04:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0ef      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x22e>
 8002f12:	e020      	b.n	8002f56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f14:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f1a:	4a09      	ldr	r2, [pc, #36]	@ (8002f40 <HAL_RCC_OscConfig+0x27c>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f24:	f7fe fc72 	bl	800180c <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f2a:	e00d      	b.n	8002f48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2c:	f7fe fc6e 	bl	800180c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d906      	bls.n	8002f48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e1ca      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	20000038 	.word	0x20000038
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f48:	4b8c      	ldr	r3, [pc, #560]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8002f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ea      	bne.n	8002f2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80a6 	beq.w	80030b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f64:	2300      	movs	r3, #0
 8002f66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f68:	4b84      	ldr	r3, [pc, #528]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_OscConfig+0x2b4>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x2b6>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00d      	beq.n	8002f9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f82:	4a7e      	ldr	r2, [pc, #504]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8002f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f8a:	4b7c      	ldr	r3, [pc, #496]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f96:	2301      	movs	r3, #1
 8002f98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f9a:	4b79      	ldr	r3, [pc, #484]	@ (8003180 <HAL_RCC_OscConfig+0x4bc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d118      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa6:	4b76      	ldr	r3, [pc, #472]	@ (8003180 <HAL_RCC_OscConfig+0x4bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a75      	ldr	r2, [pc, #468]	@ (8003180 <HAL_RCC_OscConfig+0x4bc>)
 8002fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe fc2b 	bl	800180c <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fba:	f7fe fc27 	bl	800180c <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e183      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fcc:	4b6c      	ldr	r3, [pc, #432]	@ (8003180 <HAL_RCC_OscConfig+0x4bc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d108      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x32e>
 8002fe0:	4b66      	ldr	r3, [pc, #408]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe6:	4a65      	ldr	r2, [pc, #404]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ff0:	e024      	b.n	800303c <HAL_RCC_OscConfig+0x378>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d110      	bne.n	800301c <HAL_RCC_OscConfig+0x358>
 8002ffa:	4b60      	ldr	r3, [pc, #384]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003000:	4a5e      	ldr	r2, [pc, #376]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8003002:	f043 0304 	orr.w	r3, r3, #4
 8003006:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800300a:	4b5c      	ldr	r3, [pc, #368]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003010:	4a5a      	ldr	r2, [pc, #360]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800301a:	e00f      	b.n	800303c <HAL_RCC_OscConfig+0x378>
 800301c:	4b57      	ldr	r3, [pc, #348]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003022:	4a56      	ldr	r2, [pc, #344]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800302c:	4b53      	ldr	r3, [pc, #332]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003032:	4a52      	ldr	r2, [pc, #328]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8003034:	f023 0304 	bic.w	r3, r3, #4
 8003038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d016      	beq.n	8003072 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fe fbe2 	bl	800180c <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800304a:	e00a      	b.n	8003062 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7fe fbde 	bl	800180c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e138      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003062:	4b46      	ldr	r3, [pc, #280]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0ed      	beq.n	800304c <HAL_RCC_OscConfig+0x388>
 8003070:	e015      	b.n	800309e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003072:	f7fe fbcb 	bl	800180c <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003078:	e00a      	b.n	8003090 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe fbc7 	bl	800180c <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e121      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003090:	4b3a      	ldr	r3, [pc, #232]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1ed      	bne.n	800307a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800309e:	7ffb      	ldrb	r3, [r7, #31]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d105      	bne.n	80030b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a4:	4b35      	ldr	r3, [pc, #212]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	4a34      	ldr	r2, [pc, #208]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 80030aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d03c      	beq.n	8003136 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01c      	beq.n	80030fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030c4:	4b2d      	ldr	r3, [pc, #180]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 80030c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030ca:	4a2c      	ldr	r2, [pc, #176]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7fe fb9a 	bl	800180c <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030dc:	f7fe fb96 	bl	800180c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0f2      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ee:	4b23      	ldr	r3, [pc, #140]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 80030f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0ef      	beq.n	80030dc <HAL_RCC_OscConfig+0x418>
 80030fc:	e01b      	b.n	8003136 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030fe:	4b1f      	ldr	r3, [pc, #124]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8003100:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003104:	4a1d      	ldr	r2, [pc, #116]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310e:	f7fe fb7d 	bl	800180c <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003116:	f7fe fb79 	bl	800180c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e0d5      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003128:	4b14      	ldr	r3, [pc, #80]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 800312a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1ef      	bne.n	8003116 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80c9 	beq.w	80032d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003140:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b0c      	cmp	r3, #12
 800314a:	f000 8083 	beq.w	8003254 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d15e      	bne.n	8003214 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b09      	ldr	r3, [pc, #36]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a08      	ldr	r2, [pc, #32]	@ (800317c <HAL_RCC_OscConfig+0x4b8>)
 800315c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fe fb53 	bl	800180c <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003168:	e00c      	b.n	8003184 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316a:	f7fe fb4f 	bl	800180c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d905      	bls.n	8003184 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e0ab      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
 800317c:	40021000 	.word	0x40021000
 8003180:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003184:	4b55      	ldr	r3, [pc, #340]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ec      	bne.n	800316a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003190:	4b52      	ldr	r3, [pc, #328]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	4b52      	ldr	r3, [pc, #328]	@ (80032e0 <HAL_RCC_OscConfig+0x61c>)
 8003196:	4013      	ands	r3, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6a11      	ldr	r1, [r2, #32]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031a0:	3a01      	subs	r2, #1
 80031a2:	0112      	lsls	r2, r2, #4
 80031a4:	4311      	orrs	r1, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80031aa:	0212      	lsls	r2, r2, #8
 80031ac:	4311      	orrs	r1, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80031b2:	0852      	lsrs	r2, r2, #1
 80031b4:	3a01      	subs	r2, #1
 80031b6:	0552      	lsls	r2, r2, #21
 80031b8:	4311      	orrs	r1, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031be:	0852      	lsrs	r2, r2, #1
 80031c0:	3a01      	subs	r2, #1
 80031c2:	0652      	lsls	r2, r2, #25
 80031c4:	4311      	orrs	r1, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031ca:	06d2      	lsls	r2, r2, #27
 80031cc:	430a      	orrs	r2, r1
 80031ce:	4943      	ldr	r1, [pc, #268]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d4:	4b41      	ldr	r3, [pc, #260]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a40      	ldr	r2, [pc, #256]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 80031da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031e0:	4b3e      	ldr	r3, [pc, #248]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4a3d      	ldr	r2, [pc, #244]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 80031e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe fb0e 	bl	800180c <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fb0a 	bl	800180c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e066      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003206:	4b35      	ldr	r3, [pc, #212]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x530>
 8003212:	e05e      	b.n	80032d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003214:	4b31      	ldr	r3, [pc, #196]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a30      	ldr	r2, [pc, #192]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 800321a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800321e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe faf4 	bl	800180c <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003228:	f7fe faf0 	bl	800180c <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e04c      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800323a:	4b28      	ldr	r3, [pc, #160]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003246:	4b25      	ldr	r3, [pc, #148]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	4924      	ldr	r1, [pc, #144]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 800324c:	4b25      	ldr	r3, [pc, #148]	@ (80032e4 <HAL_RCC_OscConfig+0x620>)
 800324e:	4013      	ands	r3, r2
 8003250:	60cb      	str	r3, [r1, #12]
 8003252:	e03e      	b.n	80032d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e039      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003260:	4b1e      	ldr	r3, [pc, #120]	@ (80032dc <HAL_RCC_OscConfig+0x618>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	429a      	cmp	r2, r3
 8003272:	d12c      	bne.n	80032ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	3b01      	subs	r3, #1
 8003280:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d123      	bne.n	80032ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003290:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d11b      	bne.n	80032ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d113      	bne.n	80032ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	3b01      	subs	r3, #1
 80032b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d109      	bne.n	80032ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	3b01      	subs	r3, #1
 80032c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	019f800c 	.word	0x019f800c
 80032e4:	feeefffc 	.word	0xfeeefffc

080032e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e11e      	b.n	800353e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b91      	ldr	r3, [pc, #580]	@ (8003548 <HAL_RCC_ClockConfig+0x260>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d910      	bls.n	8003330 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b8e      	ldr	r3, [pc, #568]	@ (8003548 <HAL_RCC_ClockConfig+0x260>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 020f 	bic.w	r2, r3, #15
 8003316:	498c      	ldr	r1, [pc, #560]	@ (8003548 <HAL_RCC_ClockConfig+0x260>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b8a      	ldr	r3, [pc, #552]	@ (8003548 <HAL_RCC_ClockConfig+0x260>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e106      	b.n	800353e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d073      	beq.n	8003424 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d129      	bne.n	8003398 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003344:	4b81      	ldr	r3, [pc, #516]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0f4      	b.n	800353e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003354:	f000 f99e 	bl	8003694 <RCC_GetSysClockFreqFromPLLSource>
 8003358:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4a7c      	ldr	r2, [pc, #496]	@ (8003550 <HAL_RCC_ClockConfig+0x268>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d93f      	bls.n	80033e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003362:	4b7a      	ldr	r3, [pc, #488]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003376:	2b00      	cmp	r3, #0
 8003378:	d033      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800337e:	2b00      	cmp	r3, #0
 8003380:	d12f      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003382:	4b72      	ldr	r3, [pc, #456]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800338a:	4a70      	ldr	r2, [pc, #448]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 800338c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003390:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003392:	2380      	movs	r3, #128	@ 0x80
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	e024      	b.n	80033e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d107      	bne.n	80033b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a0:	4b6a      	ldr	r3, [pc, #424]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0c6      	b.n	800353e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b0:	4b66      	ldr	r3, [pc, #408]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0be      	b.n	800353e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033c0:	f000 f8ce 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4a61      	ldr	r2, [pc, #388]	@ (8003550 <HAL_RCC_ClockConfig+0x268>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d909      	bls.n	80033e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033ce:	4b5f      	ldr	r3, [pc, #380]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033d6:	4a5d      	ldr	r2, [pc, #372]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 80033d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033e2:	4b5a      	ldr	r3, [pc, #360]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f023 0203 	bic.w	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4957      	ldr	r1, [pc, #348]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f4:	f7fe fa0a 	bl	800180c <HAL_GetTick>
 80033f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fc:	f7fe fa06 	bl	800180c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e095      	b.n	800353e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003412:	4b4e      	ldr	r3, [pc, #312]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 020c 	and.w	r2, r3, #12
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	429a      	cmp	r2, r3
 8003422:	d1eb      	bne.n	80033fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d023      	beq.n	8003478 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800343c:	4b43      	ldr	r3, [pc, #268]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a42      	ldr	r2, [pc, #264]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 8003442:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003446:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003454:	4b3d      	ldr	r3, [pc, #244]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800345c:	4a3b      	ldr	r2, [pc, #236]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 800345e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003464:	4b39      	ldr	r3, [pc, #228]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4936      	ldr	r1, [pc, #216]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
 8003476:	e008      	b.n	800348a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b80      	cmp	r3, #128	@ 0x80
 800347c:	d105      	bne.n	800348a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800347e:	4b33      	ldr	r3, [pc, #204]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	4a32      	ldr	r2, [pc, #200]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 8003484:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003488:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800348a:	4b2f      	ldr	r3, [pc, #188]	@ (8003548 <HAL_RCC_ClockConfig+0x260>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d21d      	bcs.n	80034d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003498:	4b2b      	ldr	r3, [pc, #172]	@ (8003548 <HAL_RCC_ClockConfig+0x260>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 020f 	bic.w	r2, r3, #15
 80034a0:	4929      	ldr	r1, [pc, #164]	@ (8003548 <HAL_RCC_ClockConfig+0x260>)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034a8:	f7fe f9b0 	bl	800180c <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b0:	f7fe f9ac 	bl	800180c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e03b      	b.n	800353e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b20      	ldr	r3, [pc, #128]	@ (8003548 <HAL_RCC_ClockConfig+0x260>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d1ed      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e0:	4b1a      	ldr	r3, [pc, #104]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4917      	ldr	r1, [pc, #92]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034fe:	4b13      	ldr	r3, [pc, #76]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	490f      	ldr	r1, [pc, #60]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003512:	f000 f825 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 8003516:	4602      	mov	r2, r0
 8003518:	4b0c      	ldr	r3, [pc, #48]	@ (800354c <HAL_RCC_ClockConfig+0x264>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	490c      	ldr	r1, [pc, #48]	@ (8003554 <HAL_RCC_ClockConfig+0x26c>)
 8003524:	5ccb      	ldrb	r3, [r1, r3]
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	fa22 f303 	lsr.w	r3, r2, r3
 800352e:	4a0a      	ldr	r2, [pc, #40]	@ (8003558 <HAL_RCC_ClockConfig+0x270>)
 8003530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003532:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <HAL_RCC_ClockConfig+0x274>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe f91c 	bl	8001774 <HAL_InitTick>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40022000 	.word	0x40022000
 800354c:	40021000 	.word	0x40021000
 8003550:	04c4b400 	.word	0x04c4b400
 8003554:	08005b8c 	.word	0x08005b8c
 8003558:	20000034 	.word	0x20000034
 800355c:	20000038 	.word	0x20000038

08003560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003566:	4b2c      	ldr	r3, [pc, #176]	@ (8003618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b04      	cmp	r3, #4
 8003570:	d102      	bne.n	8003578 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003572:	4b2a      	ldr	r3, [pc, #168]	@ (800361c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	e047      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003578:	4b27      	ldr	r3, [pc, #156]	@ (8003618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b08      	cmp	r3, #8
 8003582:	d102      	bne.n	800358a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003584:	4b26      	ldr	r3, [pc, #152]	@ (8003620 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	e03e      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800358a:	4b23      	ldr	r3, [pc, #140]	@ (8003618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b0c      	cmp	r3, #12
 8003594:	d136      	bne.n	8003604 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003596:	4b20      	ldr	r3, [pc, #128]	@ (8003618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	3301      	adds	r3, #1
 80035ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d10c      	bne.n	80035ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035be:	68d2      	ldr	r2, [r2, #12]
 80035c0:	0a12      	lsrs	r2, r2, #8
 80035c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035c6:	fb02 f303 	mul.w	r3, r2, r3
 80035ca:	617b      	str	r3, [r7, #20]
      break;
 80035cc:	e00c      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035ce:	4a13      	ldr	r2, [pc, #76]	@ (800361c <HAL_RCC_GetSysClockFreq+0xbc>)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d6:	4a10      	ldr	r2, [pc, #64]	@ (8003618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d8:	68d2      	ldr	r2, [r2, #12]
 80035da:	0a12      	lsrs	r2, r2, #8
 80035dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	617b      	str	r3, [r7, #20]
      break;
 80035e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	0e5b      	lsrs	r3, r3, #25
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	3301      	adds	r3, #1
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	e001      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003608:	693b      	ldr	r3, [r7, #16]
}
 800360a:	4618      	mov	r0, r3
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	00f42400 	.word	0x00f42400
 8003620:	016e3600 	.word	0x016e3600

08003624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003628:	4b03      	ldr	r3, [pc, #12]	@ (8003638 <HAL_RCC_GetHCLKFreq+0x14>)
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	20000034 	.word	0x20000034

0800363c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003640:	f7ff fff0 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4904      	ldr	r1, [pc, #16]	@ (8003664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000
 8003664:	08005b9c 	.word	0x08005b9c

08003668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800366c:	f7ff ffda 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b06      	ldr	r3, [pc, #24]	@ (800368c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0adb      	lsrs	r3, r3, #11
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4904      	ldr	r1, [pc, #16]	@ (8003690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	08005b9c 	.word	0x08005b9c

08003694 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800369a:	4b1e      	ldr	r3, [pc, #120]	@ (8003714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	3301      	adds	r3, #1
 80036b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d10c      	bne.n	80036d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036b8:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	4a14      	ldr	r2, [pc, #80]	@ (8003714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036c2:	68d2      	ldr	r2, [r2, #12]
 80036c4:	0a12      	lsrs	r2, r2, #8
 80036c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	617b      	str	r3, [r7, #20]
    break;
 80036d0:	e00c      	b.n	80036ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d2:	4a12      	ldr	r2, [pc, #72]	@ (800371c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	4a0e      	ldr	r2, [pc, #56]	@ (8003714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036dc:	68d2      	ldr	r2, [r2, #12]
 80036de:	0a12      	lsrs	r2, r2, #8
 80036e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
    break;
 80036ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036ec:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	0e5b      	lsrs	r3, r3, #25
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	3301      	adds	r3, #1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003706:	687b      	ldr	r3, [r7, #4]
}
 8003708:	4618      	mov	r0, r3
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	40021000 	.word	0x40021000
 8003718:	016e3600 	.word	0x016e3600
 800371c:	00f42400 	.word	0x00f42400

08003720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003728:	2300      	movs	r3, #0
 800372a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800372c:	2300      	movs	r3, #0
 800372e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8098 	beq.w	800386e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003742:	4b43      	ldr	r3, [pc, #268]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10d      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	4b40      	ldr	r3, [pc, #256]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003752:	4a3f      	ldr	r2, [pc, #252]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003758:	6593      	str	r3, [r2, #88]	@ 0x58
 800375a:	4b3d      	ldr	r3, [pc, #244]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003766:	2301      	movs	r3, #1
 8003768:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800376a:	4b3a      	ldr	r3, [pc, #232]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a39      	ldr	r2, [pc, #228]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003776:	f7fe f849 	bl	800180c <HAL_GetTick>
 800377a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800377c:	e009      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377e:	f7fe f845 	bl	800180c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d902      	bls.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	74fb      	strb	r3, [r7, #19]
        break;
 8003790:	e005      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003792:	4b30      	ldr	r3, [pc, #192]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0ef      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800379e:	7cfb      	ldrb	r3, [r7, #19]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d159      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01e      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d019      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037c0:	4b23      	ldr	r3, [pc, #140]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037cc:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037ec:	4a18      	ldr	r2, [pc, #96]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d016      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fe f805 	bl	800180c <HAL_GetTick>
 8003802:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003804:	e00b      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fe f801 	bl	800180c <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d902      	bls.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	74fb      	strb	r3, [r7, #19]
            break;
 800381c:	e006      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381e:	4b0c      	ldr	r3, [pc, #48]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ec      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800382c:	7cfb      	ldrb	r3, [r7, #19]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003832:	4b07      	ldr	r3, [pc, #28]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003838:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003840:	4903      	ldr	r1, [pc, #12]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003848:	e008      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800384a:	7cfb      	ldrb	r3, [r7, #19]
 800384c:	74bb      	strb	r3, [r7, #18]
 800384e:	e005      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003850:	40021000 	.word	0x40021000
 8003854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003858:	7cfb      	ldrb	r3, [r7, #19]
 800385a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800385c:	7c7b      	ldrb	r3, [r7, #17]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d105      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003862:	4ba7      	ldr	r3, [pc, #668]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	4aa6      	ldr	r2, [pc, #664]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800386c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800387a:	4ba1      	ldr	r3, [pc, #644]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003880:	f023 0203 	bic.w	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	499d      	ldr	r1, [pc, #628]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800389c:	4b98      	ldr	r3, [pc, #608]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a2:	f023 020c 	bic.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	4995      	ldr	r1, [pc, #596]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038be:	4b90      	ldr	r3, [pc, #576]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	498c      	ldr	r1, [pc, #560]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038e0:	4b87      	ldr	r3, [pc, #540]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	4984      	ldr	r1, [pc, #528]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003902:	4b7f      	ldr	r3, [pc, #508]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003908:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	497b      	ldr	r1, [pc, #492]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003924:	4b76      	ldr	r3, [pc, #472]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	4973      	ldr	r1, [pc, #460]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003946:	4b6e      	ldr	r3, [pc, #440]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	496a      	ldr	r1, [pc, #424]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003968:	4b65      	ldr	r3, [pc, #404]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	4962      	ldr	r1, [pc, #392]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800398a:	4b5d      	ldr	r3, [pc, #372]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003990:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	4959      	ldr	r1, [pc, #356]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ac:	4b54      	ldr	r3, [pc, #336]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ba:	4951      	ldr	r1, [pc, #324]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d015      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ce:	4b4c      	ldr	r3, [pc, #304]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	4948      	ldr	r1, [pc, #288]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039ec:	d105      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ee:	4b44      	ldr	r3, [pc, #272]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	4a43      	ldr	r2, [pc, #268]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039f8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d015      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a06:	4b3e      	ldr	r3, [pc, #248]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a14:	493a      	ldr	r1, [pc, #232]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a24:	d105      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a26:	4b36      	ldr	r3, [pc, #216]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	4a35      	ldr	r2, [pc, #212]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a30:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d015      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a3e:	4b30      	ldr	r3, [pc, #192]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a44:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4c:	492c      	ldr	r1, [pc, #176]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a5c:	d105      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a5e:	4b28      	ldr	r3, [pc, #160]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	4a27      	ldr	r2, [pc, #156]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a68:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d015      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a76:	4b22      	ldr	r3, [pc, #136]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a84:	491e      	ldr	r1, [pc, #120]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a94:	d105      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a96:	4b1a      	ldr	r3, [pc, #104]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	4a19      	ldr	r2, [pc, #100]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aa0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d015      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aae:	4b14      	ldr	r3, [pc, #80]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abc:	4910      	ldr	r1, [pc, #64]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003acc:	d105      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ace:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d018      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ae6:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aec:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	4902      	ldr	r1, [pc, #8]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	e001      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b00:	40021000 	.word	0x40021000
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b0a:	d105      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b0c:	4b21      	ldr	r3, [pc, #132]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a20      	ldr	r2, [pc, #128]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b16:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d015      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b24:	4b1b      	ldr	r3, [pc, #108]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	4918      	ldr	r1, [pc, #96]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b42:	d105      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b44:	4b13      	ldr	r3, [pc, #76]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4a12      	ldr	r2, [pc, #72]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d015      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b6a:	490a      	ldr	r1, [pc, #40]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b7a:	d105      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b7c:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4a04      	ldr	r2, [pc, #16]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b88:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000

08003b98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e042      	b.n	8003c30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7fd fbb3 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2224      	movs	r2, #36	@ 0x24
 8003bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fbb2 	bl	800434c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f8b3 	bl	8003d54 <UART_SetConfig>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e01b      	b.n	8003c30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fc31 	bl	8004490 <UART_CheckIdleState>
 8003c2e:	4603      	mov	r3, r0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	@ 0x28
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d17b      	bne.n	8003d4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_UART_Transmit+0x26>
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e074      	b.n	8003d4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2221      	movs	r2, #33	@ 0x21
 8003c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c72:	f7fd fdcb 	bl	800180c <HAL_GetTick>
 8003c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	88fa      	ldrh	r2, [r7, #6]
 8003c84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c90:	d108      	bne.n	8003ca4 <HAL_UART_Transmit+0x6c>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d104      	bne.n	8003ca4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	e003      	b.n	8003cac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cac:	e030      	b.n	8003d10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2180      	movs	r1, #128	@ 0x80
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fc93 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e03d      	b.n	8003d4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10b      	bne.n	8003cee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	3302      	adds	r3, #2
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	e007      	b.n	8003cfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1c8      	bne.n	8003cae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2140      	movs	r1, #64	@ 0x40
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fc5c 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e006      	b.n	8003d4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
  }
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d58:	b08c      	sub	sp, #48	@ 0x30
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4baa      	ldr	r3, [pc, #680]	@ (800402c <UART_SetConfig+0x2d8>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a9f      	ldr	r2, [pc, #636]	@ (8004030 <UART_SetConfig+0x2dc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003dca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dde:	f023 010f 	bic.w	r1, r3, #15
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a90      	ldr	r2, [pc, #576]	@ (8004034 <UART_SetConfig+0x2e0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d125      	bne.n	8003e44 <UART_SetConfig+0xf0>
 8003df8:	4b8f      	ldr	r3, [pc, #572]	@ (8004038 <UART_SetConfig+0x2e4>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d81a      	bhi.n	8003e3c <UART_SetConfig+0xe8>
 8003e06:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <UART_SetConfig+0xb8>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e1d 	.word	0x08003e1d
 8003e10:	08003e2d 	.word	0x08003e2d
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e35 	.word	0x08003e35
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e22:	e116      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003e24:	2302      	movs	r3, #2
 8003e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e2a:	e112      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e32:	e10e      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003e34:	2308      	movs	r3, #8
 8003e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e3a:	e10a      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e42:	e106      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a7c      	ldr	r2, [pc, #496]	@ (800403c <UART_SetConfig+0x2e8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d138      	bne.n	8003ec0 <UART_SetConfig+0x16c>
 8003e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004038 <UART_SetConfig+0x2e4>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	d82d      	bhi.n	8003eb8 <UART_SetConfig+0x164>
 8003e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <UART_SetConfig+0x110>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003e99 	.word	0x08003e99
 8003e68:	08003eb9 	.word	0x08003eb9
 8003e6c:	08003eb9 	.word	0x08003eb9
 8003e70:	08003eb9 	.word	0x08003eb9
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	08003eb9 	.word	0x08003eb9
 8003e7c:	08003eb9 	.word	0x08003eb9
 8003e80:	08003eb9 	.word	0x08003eb9
 8003e84:	08003ea1 	.word	0x08003ea1
 8003e88:	08003eb9 	.word	0x08003eb9
 8003e8c:	08003eb9 	.word	0x08003eb9
 8003e90:	08003eb9 	.word	0x08003eb9
 8003e94:	08003eb1 	.word	0x08003eb1
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e9e:	e0d8      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ea6:	e0d4      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eae:	e0d0      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eb6:	e0cc      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ebe:	e0c8      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a5e      	ldr	r2, [pc, #376]	@ (8004040 <UART_SetConfig+0x2ec>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d125      	bne.n	8003f16 <UART_SetConfig+0x1c2>
 8003eca:	4b5b      	ldr	r3, [pc, #364]	@ (8004038 <UART_SetConfig+0x2e4>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ed4:	2b30      	cmp	r3, #48	@ 0x30
 8003ed6:	d016      	beq.n	8003f06 <UART_SetConfig+0x1b2>
 8003ed8:	2b30      	cmp	r3, #48	@ 0x30
 8003eda:	d818      	bhi.n	8003f0e <UART_SetConfig+0x1ba>
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d00a      	beq.n	8003ef6 <UART_SetConfig+0x1a2>
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d814      	bhi.n	8003f0e <UART_SetConfig+0x1ba>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <UART_SetConfig+0x19a>
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d008      	beq.n	8003efe <UART_SetConfig+0x1aa>
 8003eec:	e00f      	b.n	8003f0e <UART_SetConfig+0x1ba>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ef4:	e0ad      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003efc:	e0a9      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003efe:	2304      	movs	r3, #4
 8003f00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f04:	e0a5      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f06:	2308      	movs	r3, #8
 8003f08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f0c:	e0a1      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f0e:	2310      	movs	r3, #16
 8003f10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f14:	e09d      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a4a      	ldr	r2, [pc, #296]	@ (8004044 <UART_SetConfig+0x2f0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d125      	bne.n	8003f6c <UART_SetConfig+0x218>
 8003f20:	4b45      	ldr	r3, [pc, #276]	@ (8004038 <UART_SetConfig+0x2e4>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f2c:	d016      	beq.n	8003f5c <UART_SetConfig+0x208>
 8003f2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f30:	d818      	bhi.n	8003f64 <UART_SetConfig+0x210>
 8003f32:	2b80      	cmp	r3, #128	@ 0x80
 8003f34:	d00a      	beq.n	8003f4c <UART_SetConfig+0x1f8>
 8003f36:	2b80      	cmp	r3, #128	@ 0x80
 8003f38:	d814      	bhi.n	8003f64 <UART_SetConfig+0x210>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <UART_SetConfig+0x1f0>
 8003f3e:	2b40      	cmp	r3, #64	@ 0x40
 8003f40:	d008      	beq.n	8003f54 <UART_SetConfig+0x200>
 8003f42:	e00f      	b.n	8003f64 <UART_SetConfig+0x210>
 8003f44:	2300      	movs	r3, #0
 8003f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f4a:	e082      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f52:	e07e      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f54:	2304      	movs	r3, #4
 8003f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f5a:	e07a      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f62:	e076      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f64:	2310      	movs	r3, #16
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f6a:	e072      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a35      	ldr	r2, [pc, #212]	@ (8004048 <UART_SetConfig+0x2f4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d12a      	bne.n	8003fcc <UART_SetConfig+0x278>
 8003f76:	4b30      	ldr	r3, [pc, #192]	@ (8004038 <UART_SetConfig+0x2e4>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f84:	d01a      	beq.n	8003fbc <UART_SetConfig+0x268>
 8003f86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f8a:	d81b      	bhi.n	8003fc4 <UART_SetConfig+0x270>
 8003f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f90:	d00c      	beq.n	8003fac <UART_SetConfig+0x258>
 8003f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f96:	d815      	bhi.n	8003fc4 <UART_SetConfig+0x270>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <UART_SetConfig+0x250>
 8003f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa0:	d008      	beq.n	8003fb4 <UART_SetConfig+0x260>
 8003fa2:	e00f      	b.n	8003fc4 <UART_SetConfig+0x270>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003faa:	e052      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003fac:	2302      	movs	r3, #2
 8003fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fb2:	e04e      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fba:	e04a      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fc2:	e046      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fca:	e042      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a17      	ldr	r2, [pc, #92]	@ (8004030 <UART_SetConfig+0x2dc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d13a      	bne.n	800404c <UART_SetConfig+0x2f8>
 8003fd6:	4b18      	ldr	r3, [pc, #96]	@ (8004038 <UART_SetConfig+0x2e4>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fe0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fe4:	d01a      	beq.n	800401c <UART_SetConfig+0x2c8>
 8003fe6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fea:	d81b      	bhi.n	8004024 <UART_SetConfig+0x2d0>
 8003fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff0:	d00c      	beq.n	800400c <UART_SetConfig+0x2b8>
 8003ff2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff6:	d815      	bhi.n	8004024 <UART_SetConfig+0x2d0>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <UART_SetConfig+0x2b0>
 8003ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004000:	d008      	beq.n	8004014 <UART_SetConfig+0x2c0>
 8004002:	e00f      	b.n	8004024 <UART_SetConfig+0x2d0>
 8004004:	2300      	movs	r3, #0
 8004006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800400a:	e022      	b.n	8004052 <UART_SetConfig+0x2fe>
 800400c:	2302      	movs	r3, #2
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004012:	e01e      	b.n	8004052 <UART_SetConfig+0x2fe>
 8004014:	2304      	movs	r3, #4
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800401a:	e01a      	b.n	8004052 <UART_SetConfig+0x2fe>
 800401c:	2308      	movs	r3, #8
 800401e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004022:	e016      	b.n	8004052 <UART_SetConfig+0x2fe>
 8004024:	2310      	movs	r3, #16
 8004026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800402a:	e012      	b.n	8004052 <UART_SetConfig+0x2fe>
 800402c:	cfff69f3 	.word	0xcfff69f3
 8004030:	40008000 	.word	0x40008000
 8004034:	40013800 	.word	0x40013800
 8004038:	40021000 	.word	0x40021000
 800403c:	40004400 	.word	0x40004400
 8004040:	40004800 	.word	0x40004800
 8004044:	40004c00 	.word	0x40004c00
 8004048:	40005000 	.word	0x40005000
 800404c:	2310      	movs	r3, #16
 800404e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4aae      	ldr	r2, [pc, #696]	@ (8004310 <UART_SetConfig+0x5bc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	f040 8097 	bne.w	800418c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800405e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004062:	2b08      	cmp	r3, #8
 8004064:	d823      	bhi.n	80040ae <UART_SetConfig+0x35a>
 8004066:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <UART_SetConfig+0x318>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	08004091 	.word	0x08004091
 8004070:	080040af 	.word	0x080040af
 8004074:	08004099 	.word	0x08004099
 8004078:	080040af 	.word	0x080040af
 800407c:	0800409f 	.word	0x0800409f
 8004080:	080040af 	.word	0x080040af
 8004084:	080040af 	.word	0x080040af
 8004088:	080040af 	.word	0x080040af
 800408c:	080040a7 	.word	0x080040a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7ff fad4 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 8004094:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004096:	e010      	b.n	80040ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004098:	4b9e      	ldr	r3, [pc, #632]	@ (8004314 <UART_SetConfig+0x5c0>)
 800409a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800409c:	e00d      	b.n	80040ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800409e:	f7ff fa5f 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 80040a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040a4:	e009      	b.n	80040ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040ac:	e005      	b.n	80040ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80040b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8130 	beq.w	8004322 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	4a94      	ldr	r2, [pc, #592]	@ (8004318 <UART_SetConfig+0x5c4>)
 80040c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040cc:	461a      	mov	r2, r3
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	4413      	add	r3, r2
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d305      	bcc.n	80040f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d903      	bls.n	80040fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040f8:	e113      	b.n	8004322 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	2200      	movs	r2, #0
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	60fa      	str	r2, [r7, #12]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	4a84      	ldr	r2, [pc, #528]	@ (8004318 <UART_SetConfig+0x5c4>)
 8004108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800410c:	b29b      	uxth	r3, r3
 800410e:	2200      	movs	r2, #0
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004118:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800411c:	f7fc f8d0 	bl	80002c0 <__aeabi_uldivmod>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4610      	mov	r0, r2
 8004126:	4619      	mov	r1, r3
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	020b      	lsls	r3, r1, #8
 8004132:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004136:	0202      	lsls	r2, r0, #8
 8004138:	6979      	ldr	r1, [r7, #20]
 800413a:	6849      	ldr	r1, [r1, #4]
 800413c:	0849      	lsrs	r1, r1, #1
 800413e:	2000      	movs	r0, #0
 8004140:	460c      	mov	r4, r1
 8004142:	4605      	mov	r5, r0
 8004144:	eb12 0804 	adds.w	r8, r2, r4
 8004148:	eb43 0905 	adc.w	r9, r3, r5
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	469a      	mov	sl, r3
 8004154:	4693      	mov	fp, r2
 8004156:	4652      	mov	r2, sl
 8004158:	465b      	mov	r3, fp
 800415a:	4640      	mov	r0, r8
 800415c:	4649      	mov	r1, r9
 800415e:	f7fc f8af 	bl	80002c0 <__aeabi_uldivmod>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4613      	mov	r3, r2
 8004168:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004170:	d308      	bcc.n	8004184 <UART_SetConfig+0x430>
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004178:	d204      	bcs.n	8004184 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a3a      	ldr	r2, [r7, #32]
 8004180:	60da      	str	r2, [r3, #12]
 8004182:	e0ce      	b.n	8004322 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800418a:	e0ca      	b.n	8004322 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004194:	d166      	bne.n	8004264 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004196:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800419a:	2b08      	cmp	r3, #8
 800419c:	d827      	bhi.n	80041ee <UART_SetConfig+0x49a>
 800419e:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <UART_SetConfig+0x450>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	080041c9 	.word	0x080041c9
 80041a8:	080041d1 	.word	0x080041d1
 80041ac:	080041d9 	.word	0x080041d9
 80041b0:	080041ef 	.word	0x080041ef
 80041b4:	080041df 	.word	0x080041df
 80041b8:	080041ef 	.word	0x080041ef
 80041bc:	080041ef 	.word	0x080041ef
 80041c0:	080041ef 	.word	0x080041ef
 80041c4:	080041e7 	.word	0x080041e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c8:	f7ff fa38 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 80041cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041ce:	e014      	b.n	80041fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041d0:	f7ff fa4a 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 80041d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041d6:	e010      	b.n	80041fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004314 <UART_SetConfig+0x5c0>)
 80041da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041dc:	e00d      	b.n	80041fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041de:	f7ff f9bf 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 80041e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041e4:	e009      	b.n	80041fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041ec:	e005      	b.n	80041fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80041f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8090 	beq.w	8004322 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	4a44      	ldr	r2, [pc, #272]	@ (8004318 <UART_SetConfig+0x5c4>)
 8004208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800420c:	461a      	mov	r2, r3
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	fbb3 f3f2 	udiv	r3, r3, r2
 8004214:	005a      	lsls	r2, r3, #1
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	441a      	add	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	2b0f      	cmp	r3, #15
 800422c:	d916      	bls.n	800425c <UART_SetConfig+0x508>
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004234:	d212      	bcs.n	800425c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f023 030f 	bic.w	r3, r3, #15
 800423e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	b29b      	uxth	r3, r3
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	b29a      	uxth	r2, r3
 800424c:	8bfb      	ldrh	r3, [r7, #30]
 800424e:	4313      	orrs	r3, r2
 8004250:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	8bfa      	ldrh	r2, [r7, #30]
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	e062      	b.n	8004322 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004262:	e05e      	b.n	8004322 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004264:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004268:	2b08      	cmp	r3, #8
 800426a:	d828      	bhi.n	80042be <UART_SetConfig+0x56a>
 800426c:	a201      	add	r2, pc, #4	@ (adr r2, 8004274 <UART_SetConfig+0x520>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	08004299 	.word	0x08004299
 8004278:	080042a1 	.word	0x080042a1
 800427c:	080042a9 	.word	0x080042a9
 8004280:	080042bf 	.word	0x080042bf
 8004284:	080042af 	.word	0x080042af
 8004288:	080042bf 	.word	0x080042bf
 800428c:	080042bf 	.word	0x080042bf
 8004290:	080042bf 	.word	0x080042bf
 8004294:	080042b7 	.word	0x080042b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004298:	f7ff f9d0 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 800429c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800429e:	e014      	b.n	80042ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042a0:	f7ff f9e2 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 80042a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042a6:	e010      	b.n	80042ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <UART_SetConfig+0x5c0>)
 80042aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042ac:	e00d      	b.n	80042ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ae:	f7ff f957 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 80042b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042b4:	e009      	b.n	80042ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042bc:	e005      	b.n	80042ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80042c8:	bf00      	nop
    }

    if (pclk != 0U)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d028      	beq.n	8004322 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	4a10      	ldr	r2, [pc, #64]	@ (8004318 <UART_SetConfig+0x5c4>)
 80042d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042da:	461a      	mov	r2, r3
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	fbb3 f2f2 	udiv	r2, r3, r2
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	441a      	add	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	2b0f      	cmp	r3, #15
 80042f8:	d910      	bls.n	800431c <UART_SetConfig+0x5c8>
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004300:	d20c      	bcs.n	800431c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	b29a      	uxth	r2, r3
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e009      	b.n	8004322 <UART_SetConfig+0x5ce>
 800430e:	bf00      	nop
 8004310:	40008000 	.word	0x40008000
 8004314:	00f42400 	.word	0x00f42400
 8004318:	08005bb4 	.word	0x08005bb4
      }
      else
      {
        ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2201      	movs	r2, #1
 8004326:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2201      	movs	r2, #1
 800432e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2200      	movs	r2, #0
 8004336:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2200      	movs	r2, #0
 800433c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800433e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004342:	4618      	mov	r0, r3
 8004344:	3730      	adds	r7, #48	@ 0x30
 8004346:	46bd      	mov	sp, r7
 8004348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800434c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01a      	beq.n	8004462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800444a:	d10a      	bne.n	8004462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	605a      	str	r2, [r3, #4]
  }
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b098      	sub	sp, #96	@ 0x60
 8004494:	af02      	add	r7, sp, #8
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044a0:	f7fd f9b4 	bl	800180c <HAL_GetTick>
 80044a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d12f      	bne.n	8004514 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044bc:	2200      	movs	r2, #0
 80044be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f88e 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d022      	beq.n	8004514 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e6      	bne.n	80044ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e063      	b.n	80045dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b04      	cmp	r3, #4
 8004520:	d149      	bne.n	80045b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004522:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800452a:	2200      	movs	r2, #0
 800452c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f857 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d03c      	beq.n	80045b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	623b      	str	r3, [r7, #32]
   return(result);
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004550:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800455a:	633b      	str	r3, [r7, #48]	@ 0x30
 800455c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e6      	bne.n	800453c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3308      	adds	r3, #8
 8004574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	60fb      	str	r3, [r7, #12]
   return(result);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800458e:	61fa      	str	r2, [r7, #28]
 8004590:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	69b9      	ldr	r1, [r7, #24]
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	617b      	str	r3, [r7, #20]
   return(result);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e5      	bne.n	800456e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e012      	b.n	80045dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3758      	adds	r7, #88	@ 0x58
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f4:	e04f      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d04b      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fe:	f7fd f905 	bl	800180c <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <UART_WaitOnFlagUntilTimeout+0x30>
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e04e      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d037      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b80      	cmp	r3, #128	@ 0x80
 800462a:	d034      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb2>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b40      	cmp	r3, #64	@ 0x40
 8004630:	d031      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b08      	cmp	r3, #8
 800463e:	d110      	bne.n	8004662 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2208      	movs	r2, #8
 8004646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f838 	bl	80046be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2208      	movs	r2, #8
 8004652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e029      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004670:	d111      	bne.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800467a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f81e 	bl	80046be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e00f      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4013      	ands	r3, r2
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	bf0c      	ite	eq
 80046a6:	2301      	moveq	r3, #1
 80046a8:	2300      	movne	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d0a0      	beq.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046be:	b480      	push	{r7}
 80046c0:	b095      	sub	sp, #84	@ 0x54
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e6      	bne.n	80046c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3308      	adds	r3, #8
 80046fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	61fb      	str	r3, [r7, #28]
   return(result);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800471c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800471e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e3      	bne.n	80046f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d118      	bne.n	800476a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	60bb      	str	r3, [r7, #8]
   return(result);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f023 0310 	bic.w	r3, r3, #16
 800474c:	647b      	str	r3, [r7, #68]	@ 0x44
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6979      	ldr	r1, [r7, #20]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	613b      	str	r3, [r7, #16]
   return(result);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e6      	bne.n	8004738 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800477e:	bf00      	nop
 8004780:	3754      	adds	r7, #84	@ 0x54
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800478a:	b480      	push	{r7}
 800478c:	b085      	sub	sp, #20
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800479c:	2302      	movs	r3, #2
 800479e:	e027      	b.n	80047f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2224      	movs	r2, #36	@ 0x24
 80047ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80047ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004810:	2302      	movs	r3, #2
 8004812:	e02d      	b.n	8004870 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2224      	movs	r2, #36	@ 0x24
 8004820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f84f 	bl	80048f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800488c:	2302      	movs	r3, #2
 800488e:	e02d      	b.n	80048ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2224      	movs	r2, #36	@ 0x24
 800489c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0201 	bic.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f811 	bl	80048f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004900:	2b00      	cmp	r3, #0
 8004902:	d108      	bne.n	8004916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004914:	e031      	b.n	800497a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004916:	2308      	movs	r3, #8
 8004918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800491a:	2308      	movs	r3, #8
 800491c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	0e5b      	lsrs	r3, r3, #25
 8004926:	b2db      	uxtb	r3, r3
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	0f5b      	lsrs	r3, r3, #29
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800493e:	7bbb      	ldrb	r3, [r7, #14]
 8004940:	7b3a      	ldrb	r2, [r7, #12]
 8004942:	4911      	ldr	r1, [pc, #68]	@ (8004988 <UARTEx_SetNbDataToProcess+0x94>)
 8004944:	5c8a      	ldrb	r2, [r1, r2]
 8004946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800494a:	7b3a      	ldrb	r2, [r7, #12]
 800494c:	490f      	ldr	r1, [pc, #60]	@ (800498c <UARTEx_SetNbDataToProcess+0x98>)
 800494e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004950:	fb93 f3f2 	sdiv	r3, r3, r2
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	7b7a      	ldrb	r2, [r7, #13]
 8004960:	4909      	ldr	r1, [pc, #36]	@ (8004988 <UARTEx_SetNbDataToProcess+0x94>)
 8004962:	5c8a      	ldrb	r2, [r1, r2]
 8004964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004968:	7b7a      	ldrb	r2, [r7, #13]
 800496a:	4908      	ldr	r1, [pc, #32]	@ (800498c <UARTEx_SetNbDataToProcess+0x98>)
 800496c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800496e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004972:	b29a      	uxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	08005bcc 	.word	0x08005bcc
 800498c:	08005bd4 	.word	0x08005bd4

08004990 <std>:
 8004990:	2300      	movs	r3, #0
 8004992:	b510      	push	{r4, lr}
 8004994:	4604      	mov	r4, r0
 8004996:	e9c0 3300 	strd	r3, r3, [r0]
 800499a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800499e:	6083      	str	r3, [r0, #8]
 80049a0:	8181      	strh	r1, [r0, #12]
 80049a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80049a4:	81c2      	strh	r2, [r0, #14]
 80049a6:	6183      	str	r3, [r0, #24]
 80049a8:	4619      	mov	r1, r3
 80049aa:	2208      	movs	r2, #8
 80049ac:	305c      	adds	r0, #92	@ 0x5c
 80049ae:	f000 fa01 	bl	8004db4 <memset>
 80049b2:	4b0d      	ldr	r3, [pc, #52]	@ (80049e8 <std+0x58>)
 80049b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80049b6:	4b0d      	ldr	r3, [pc, #52]	@ (80049ec <std+0x5c>)
 80049b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80049ba:	4b0d      	ldr	r3, [pc, #52]	@ (80049f0 <std+0x60>)
 80049bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80049be:	4b0d      	ldr	r3, [pc, #52]	@ (80049f4 <std+0x64>)
 80049c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80049c2:	4b0d      	ldr	r3, [pc, #52]	@ (80049f8 <std+0x68>)
 80049c4:	6224      	str	r4, [r4, #32]
 80049c6:	429c      	cmp	r4, r3
 80049c8:	d006      	beq.n	80049d8 <std+0x48>
 80049ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80049ce:	4294      	cmp	r4, r2
 80049d0:	d002      	beq.n	80049d8 <std+0x48>
 80049d2:	33d0      	adds	r3, #208	@ 0xd0
 80049d4:	429c      	cmp	r4, r3
 80049d6:	d105      	bne.n	80049e4 <std+0x54>
 80049d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80049dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e0:	f000 ba60 	b.w	8004ea4 <__retarget_lock_init_recursive>
 80049e4:	bd10      	pop	{r4, pc}
 80049e6:	bf00      	nop
 80049e8:	08004c05 	.word	0x08004c05
 80049ec:	08004c27 	.word	0x08004c27
 80049f0:	08004c5f 	.word	0x08004c5f
 80049f4:	08004c83 	.word	0x08004c83
 80049f8:	200003b4 	.word	0x200003b4

080049fc <stdio_exit_handler>:
 80049fc:	4a02      	ldr	r2, [pc, #8]	@ (8004a08 <stdio_exit_handler+0xc>)
 80049fe:	4903      	ldr	r1, [pc, #12]	@ (8004a0c <stdio_exit_handler+0x10>)
 8004a00:	4803      	ldr	r0, [pc, #12]	@ (8004a10 <stdio_exit_handler+0x14>)
 8004a02:	f000 b869 	b.w	8004ad8 <_fwalk_sglue>
 8004a06:	bf00      	nop
 8004a08:	20000040 	.word	0x20000040
 8004a0c:	08005745 	.word	0x08005745
 8004a10:	20000050 	.word	0x20000050

08004a14 <cleanup_stdio>:
 8004a14:	6841      	ldr	r1, [r0, #4]
 8004a16:	4b0c      	ldr	r3, [pc, #48]	@ (8004a48 <cleanup_stdio+0x34>)
 8004a18:	4299      	cmp	r1, r3
 8004a1a:	b510      	push	{r4, lr}
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	d001      	beq.n	8004a24 <cleanup_stdio+0x10>
 8004a20:	f000 fe90 	bl	8005744 <_fflush_r>
 8004a24:	68a1      	ldr	r1, [r4, #8]
 8004a26:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <cleanup_stdio+0x38>)
 8004a28:	4299      	cmp	r1, r3
 8004a2a:	d002      	beq.n	8004a32 <cleanup_stdio+0x1e>
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f000 fe89 	bl	8005744 <_fflush_r>
 8004a32:	68e1      	ldr	r1, [r4, #12]
 8004a34:	4b06      	ldr	r3, [pc, #24]	@ (8004a50 <cleanup_stdio+0x3c>)
 8004a36:	4299      	cmp	r1, r3
 8004a38:	d004      	beq.n	8004a44 <cleanup_stdio+0x30>
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a40:	f000 be80 	b.w	8005744 <_fflush_r>
 8004a44:	bd10      	pop	{r4, pc}
 8004a46:	bf00      	nop
 8004a48:	200003b4 	.word	0x200003b4
 8004a4c:	2000041c 	.word	0x2000041c
 8004a50:	20000484 	.word	0x20000484

08004a54 <global_stdio_init.part.0>:
 8004a54:	b510      	push	{r4, lr}
 8004a56:	4b0b      	ldr	r3, [pc, #44]	@ (8004a84 <global_stdio_init.part.0+0x30>)
 8004a58:	4c0b      	ldr	r4, [pc, #44]	@ (8004a88 <global_stdio_init.part.0+0x34>)
 8004a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a8c <global_stdio_init.part.0+0x38>)
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	4620      	mov	r0, r4
 8004a60:	2200      	movs	r2, #0
 8004a62:	2104      	movs	r1, #4
 8004a64:	f7ff ff94 	bl	8004990 <std>
 8004a68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	2109      	movs	r1, #9
 8004a70:	f7ff ff8e 	bl	8004990 <std>
 8004a74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a78:	2202      	movs	r2, #2
 8004a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a7e:	2112      	movs	r1, #18
 8004a80:	f7ff bf86 	b.w	8004990 <std>
 8004a84:	200004ec 	.word	0x200004ec
 8004a88:	200003b4 	.word	0x200003b4
 8004a8c:	080049fd 	.word	0x080049fd

08004a90 <__sfp_lock_acquire>:
 8004a90:	4801      	ldr	r0, [pc, #4]	@ (8004a98 <__sfp_lock_acquire+0x8>)
 8004a92:	f000 ba08 	b.w	8004ea6 <__retarget_lock_acquire_recursive>
 8004a96:	bf00      	nop
 8004a98:	200004f5 	.word	0x200004f5

08004a9c <__sfp_lock_release>:
 8004a9c:	4801      	ldr	r0, [pc, #4]	@ (8004aa4 <__sfp_lock_release+0x8>)
 8004a9e:	f000 ba03 	b.w	8004ea8 <__retarget_lock_release_recursive>
 8004aa2:	bf00      	nop
 8004aa4:	200004f5 	.word	0x200004f5

08004aa8 <__sinit>:
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	4604      	mov	r4, r0
 8004aac:	f7ff fff0 	bl	8004a90 <__sfp_lock_acquire>
 8004ab0:	6a23      	ldr	r3, [r4, #32]
 8004ab2:	b11b      	cbz	r3, 8004abc <__sinit+0x14>
 8004ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ab8:	f7ff bff0 	b.w	8004a9c <__sfp_lock_release>
 8004abc:	4b04      	ldr	r3, [pc, #16]	@ (8004ad0 <__sinit+0x28>)
 8004abe:	6223      	str	r3, [r4, #32]
 8004ac0:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <__sinit+0x2c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f5      	bne.n	8004ab4 <__sinit+0xc>
 8004ac8:	f7ff ffc4 	bl	8004a54 <global_stdio_init.part.0>
 8004acc:	e7f2      	b.n	8004ab4 <__sinit+0xc>
 8004ace:	bf00      	nop
 8004ad0:	08004a15 	.word	0x08004a15
 8004ad4:	200004ec 	.word	0x200004ec

08004ad8 <_fwalk_sglue>:
 8004ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004adc:	4607      	mov	r7, r0
 8004ade:	4688      	mov	r8, r1
 8004ae0:	4614      	mov	r4, r2
 8004ae2:	2600      	movs	r6, #0
 8004ae4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ae8:	f1b9 0901 	subs.w	r9, r9, #1
 8004aec:	d505      	bpl.n	8004afa <_fwalk_sglue+0x22>
 8004aee:	6824      	ldr	r4, [r4, #0]
 8004af0:	2c00      	cmp	r4, #0
 8004af2:	d1f7      	bne.n	8004ae4 <_fwalk_sglue+0xc>
 8004af4:	4630      	mov	r0, r6
 8004af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004afa:	89ab      	ldrh	r3, [r5, #12]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d907      	bls.n	8004b10 <_fwalk_sglue+0x38>
 8004b00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b04:	3301      	adds	r3, #1
 8004b06:	d003      	beq.n	8004b10 <_fwalk_sglue+0x38>
 8004b08:	4629      	mov	r1, r5
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	47c0      	blx	r8
 8004b0e:	4306      	orrs	r6, r0
 8004b10:	3568      	adds	r5, #104	@ 0x68
 8004b12:	e7e9      	b.n	8004ae8 <_fwalk_sglue+0x10>

08004b14 <iprintf>:
 8004b14:	b40f      	push	{r0, r1, r2, r3}
 8004b16:	b507      	push	{r0, r1, r2, lr}
 8004b18:	4906      	ldr	r1, [pc, #24]	@ (8004b34 <iprintf+0x20>)
 8004b1a:	ab04      	add	r3, sp, #16
 8004b1c:	6808      	ldr	r0, [r1, #0]
 8004b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b22:	6881      	ldr	r1, [r0, #8]
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	f000 fae3 	bl	80050f0 <_vfiprintf_r>
 8004b2a:	b003      	add	sp, #12
 8004b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b30:	b004      	add	sp, #16
 8004b32:	4770      	bx	lr
 8004b34:	2000004c 	.word	0x2000004c

08004b38 <putchar>:
 8004b38:	4b02      	ldr	r3, [pc, #8]	@ (8004b44 <putchar+0xc>)
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	6882      	ldr	r2, [r0, #8]
 8004b40:	f000 be8a 	b.w	8005858 <_putc_r>
 8004b44:	2000004c 	.word	0x2000004c

08004b48 <_puts_r>:
 8004b48:	6a03      	ldr	r3, [r0, #32]
 8004b4a:	b570      	push	{r4, r5, r6, lr}
 8004b4c:	6884      	ldr	r4, [r0, #8]
 8004b4e:	4605      	mov	r5, r0
 8004b50:	460e      	mov	r6, r1
 8004b52:	b90b      	cbnz	r3, 8004b58 <_puts_r+0x10>
 8004b54:	f7ff ffa8 	bl	8004aa8 <__sinit>
 8004b58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b5a:	07db      	lsls	r3, r3, #31
 8004b5c:	d405      	bmi.n	8004b6a <_puts_r+0x22>
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	0598      	lsls	r0, r3, #22
 8004b62:	d402      	bmi.n	8004b6a <_puts_r+0x22>
 8004b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b66:	f000 f99e 	bl	8004ea6 <__retarget_lock_acquire_recursive>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	0719      	lsls	r1, r3, #28
 8004b6e:	d502      	bpl.n	8004b76 <_puts_r+0x2e>
 8004b70:	6923      	ldr	r3, [r4, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d135      	bne.n	8004be2 <_puts_r+0x9a>
 8004b76:	4621      	mov	r1, r4
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f000 f8c5 	bl	8004d08 <__swsetup_r>
 8004b7e:	b380      	cbz	r0, 8004be2 <_puts_r+0x9a>
 8004b80:	f04f 35ff 	mov.w	r5, #4294967295
 8004b84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b86:	07da      	lsls	r2, r3, #31
 8004b88:	d405      	bmi.n	8004b96 <_puts_r+0x4e>
 8004b8a:	89a3      	ldrh	r3, [r4, #12]
 8004b8c:	059b      	lsls	r3, r3, #22
 8004b8e:	d402      	bmi.n	8004b96 <_puts_r+0x4e>
 8004b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b92:	f000 f989 	bl	8004ea8 <__retarget_lock_release_recursive>
 8004b96:	4628      	mov	r0, r5
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	da04      	bge.n	8004ba8 <_puts_r+0x60>
 8004b9e:	69a2      	ldr	r2, [r4, #24]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	dc17      	bgt.n	8004bd4 <_puts_r+0x8c>
 8004ba4:	290a      	cmp	r1, #10
 8004ba6:	d015      	beq.n	8004bd4 <_puts_r+0x8c>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	6022      	str	r2, [r4, #0]
 8004bae:	7019      	strb	r1, [r3, #0]
 8004bb0:	68a3      	ldr	r3, [r4, #8]
 8004bb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	60a3      	str	r3, [r4, #8]
 8004bba:	2900      	cmp	r1, #0
 8004bbc:	d1ed      	bne.n	8004b9a <_puts_r+0x52>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	da11      	bge.n	8004be6 <_puts_r+0x9e>
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	210a      	movs	r1, #10
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f000 f85f 	bl	8004c8a <__swbuf_r>
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d0d7      	beq.n	8004b80 <_puts_r+0x38>
 8004bd0:	250a      	movs	r5, #10
 8004bd2:	e7d7      	b.n	8004b84 <_puts_r+0x3c>
 8004bd4:	4622      	mov	r2, r4
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f000 f857 	bl	8004c8a <__swbuf_r>
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d1e7      	bne.n	8004bb0 <_puts_r+0x68>
 8004be0:	e7ce      	b.n	8004b80 <_puts_r+0x38>
 8004be2:	3e01      	subs	r6, #1
 8004be4:	e7e4      	b.n	8004bb0 <_puts_r+0x68>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	6022      	str	r2, [r4, #0]
 8004bec:	220a      	movs	r2, #10
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	e7ee      	b.n	8004bd0 <_puts_r+0x88>
	...

08004bf4 <puts>:
 8004bf4:	4b02      	ldr	r3, [pc, #8]	@ (8004c00 <puts+0xc>)
 8004bf6:	4601      	mov	r1, r0
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	f7ff bfa5 	b.w	8004b48 <_puts_r>
 8004bfe:	bf00      	nop
 8004c00:	2000004c 	.word	0x2000004c

08004c04 <__sread>:
 8004c04:	b510      	push	{r4, lr}
 8004c06:	460c      	mov	r4, r1
 8004c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0c:	f000 f8fc 	bl	8004e08 <_read_r>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	bfab      	itete	ge
 8004c14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c16:	89a3      	ldrhlt	r3, [r4, #12]
 8004c18:	181b      	addge	r3, r3, r0
 8004c1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c1e:	bfac      	ite	ge
 8004c20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c22:	81a3      	strhlt	r3, [r4, #12]
 8004c24:	bd10      	pop	{r4, pc}

08004c26 <__swrite>:
 8004c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2a:	461f      	mov	r7, r3
 8004c2c:	898b      	ldrh	r3, [r1, #12]
 8004c2e:	05db      	lsls	r3, r3, #23
 8004c30:	4605      	mov	r5, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	4616      	mov	r6, r2
 8004c36:	d505      	bpl.n	8004c44 <__swrite+0x1e>
 8004c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f000 f8d0 	bl	8004de4 <_lseek_r>
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	4632      	mov	r2, r6
 8004c52:	463b      	mov	r3, r7
 8004c54:	4628      	mov	r0, r5
 8004c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5a:	f000 b8e7 	b.w	8004e2c <_write_r>

08004c5e <__sseek>:
 8004c5e:	b510      	push	{r4, lr}
 8004c60:	460c      	mov	r4, r1
 8004c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c66:	f000 f8bd 	bl	8004de4 <_lseek_r>
 8004c6a:	1c43      	adds	r3, r0, #1
 8004c6c:	89a3      	ldrh	r3, [r4, #12]
 8004c6e:	bf15      	itete	ne
 8004c70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c7a:	81a3      	strheq	r3, [r4, #12]
 8004c7c:	bf18      	it	ne
 8004c7e:	81a3      	strhne	r3, [r4, #12]
 8004c80:	bd10      	pop	{r4, pc}

08004c82 <__sclose>:
 8004c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c86:	f000 b89d 	b.w	8004dc4 <_close_r>

08004c8a <__swbuf_r>:
 8004c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8c:	460e      	mov	r6, r1
 8004c8e:	4614      	mov	r4, r2
 8004c90:	4605      	mov	r5, r0
 8004c92:	b118      	cbz	r0, 8004c9c <__swbuf_r+0x12>
 8004c94:	6a03      	ldr	r3, [r0, #32]
 8004c96:	b90b      	cbnz	r3, 8004c9c <__swbuf_r+0x12>
 8004c98:	f7ff ff06 	bl	8004aa8 <__sinit>
 8004c9c:	69a3      	ldr	r3, [r4, #24]
 8004c9e:	60a3      	str	r3, [r4, #8]
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	071a      	lsls	r2, r3, #28
 8004ca4:	d501      	bpl.n	8004caa <__swbuf_r+0x20>
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	b943      	cbnz	r3, 8004cbc <__swbuf_r+0x32>
 8004caa:	4621      	mov	r1, r4
 8004cac:	4628      	mov	r0, r5
 8004cae:	f000 f82b 	bl	8004d08 <__swsetup_r>
 8004cb2:	b118      	cbz	r0, 8004cbc <__swbuf_r+0x32>
 8004cb4:	f04f 37ff 	mov.w	r7, #4294967295
 8004cb8:	4638      	mov	r0, r7
 8004cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	6922      	ldr	r2, [r4, #16]
 8004cc0:	1a98      	subs	r0, r3, r2
 8004cc2:	6963      	ldr	r3, [r4, #20]
 8004cc4:	b2f6      	uxtb	r6, r6
 8004cc6:	4283      	cmp	r3, r0
 8004cc8:	4637      	mov	r7, r6
 8004cca:	dc05      	bgt.n	8004cd8 <__swbuf_r+0x4e>
 8004ccc:	4621      	mov	r1, r4
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f000 fd38 	bl	8005744 <_fflush_r>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d1ed      	bne.n	8004cb4 <__swbuf_r+0x2a>
 8004cd8:	68a3      	ldr	r3, [r4, #8]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	60a3      	str	r3, [r4, #8]
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	6022      	str	r2, [r4, #0]
 8004ce4:	701e      	strb	r6, [r3, #0]
 8004ce6:	6962      	ldr	r2, [r4, #20]
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d004      	beq.n	8004cf8 <__swbuf_r+0x6e>
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	07db      	lsls	r3, r3, #31
 8004cf2:	d5e1      	bpl.n	8004cb8 <__swbuf_r+0x2e>
 8004cf4:	2e0a      	cmp	r6, #10
 8004cf6:	d1df      	bne.n	8004cb8 <__swbuf_r+0x2e>
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f000 fd22 	bl	8005744 <_fflush_r>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d0d9      	beq.n	8004cb8 <__swbuf_r+0x2e>
 8004d04:	e7d6      	b.n	8004cb4 <__swbuf_r+0x2a>
	...

08004d08 <__swsetup_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	4b29      	ldr	r3, [pc, #164]	@ (8004db0 <__swsetup_r+0xa8>)
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	460c      	mov	r4, r1
 8004d12:	b118      	cbz	r0, 8004d1c <__swsetup_r+0x14>
 8004d14:	6a03      	ldr	r3, [r0, #32]
 8004d16:	b90b      	cbnz	r3, 8004d1c <__swsetup_r+0x14>
 8004d18:	f7ff fec6 	bl	8004aa8 <__sinit>
 8004d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d20:	0719      	lsls	r1, r3, #28
 8004d22:	d422      	bmi.n	8004d6a <__swsetup_r+0x62>
 8004d24:	06da      	lsls	r2, r3, #27
 8004d26:	d407      	bmi.n	8004d38 <__swsetup_r+0x30>
 8004d28:	2209      	movs	r2, #9
 8004d2a:	602a      	str	r2, [r5, #0]
 8004d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d30:	81a3      	strh	r3, [r4, #12]
 8004d32:	f04f 30ff 	mov.w	r0, #4294967295
 8004d36:	e033      	b.n	8004da0 <__swsetup_r+0x98>
 8004d38:	0758      	lsls	r0, r3, #29
 8004d3a:	d512      	bpl.n	8004d62 <__swsetup_r+0x5a>
 8004d3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d3e:	b141      	cbz	r1, 8004d52 <__swsetup_r+0x4a>
 8004d40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d44:	4299      	cmp	r1, r3
 8004d46:	d002      	beq.n	8004d4e <__swsetup_r+0x46>
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 f8af 	bl	8004eac <_free_r>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d58:	81a3      	strh	r3, [r4, #12]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6063      	str	r3, [r4, #4]
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	f043 0308 	orr.w	r3, r3, #8
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	b94b      	cbnz	r3, 8004d82 <__swsetup_r+0x7a>
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d78:	d003      	beq.n	8004d82 <__swsetup_r+0x7a>
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	f000 fd2f 	bl	80057e0 <__smakebuf_r>
 8004d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d86:	f013 0201 	ands.w	r2, r3, #1
 8004d8a:	d00a      	beq.n	8004da2 <__swsetup_r+0x9a>
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	60a2      	str	r2, [r4, #8]
 8004d90:	6962      	ldr	r2, [r4, #20]
 8004d92:	4252      	negs	r2, r2
 8004d94:	61a2      	str	r2, [r4, #24]
 8004d96:	6922      	ldr	r2, [r4, #16]
 8004d98:	b942      	cbnz	r2, 8004dac <__swsetup_r+0xa4>
 8004d9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d9e:	d1c5      	bne.n	8004d2c <__swsetup_r+0x24>
 8004da0:	bd38      	pop	{r3, r4, r5, pc}
 8004da2:	0799      	lsls	r1, r3, #30
 8004da4:	bf58      	it	pl
 8004da6:	6962      	ldrpl	r2, [r4, #20]
 8004da8:	60a2      	str	r2, [r4, #8]
 8004daa:	e7f4      	b.n	8004d96 <__swsetup_r+0x8e>
 8004dac:	2000      	movs	r0, #0
 8004dae:	e7f7      	b.n	8004da0 <__swsetup_r+0x98>
 8004db0:	2000004c 	.word	0x2000004c

08004db4 <memset>:
 8004db4:	4402      	add	r2, r0
 8004db6:	4603      	mov	r3, r0
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d100      	bne.n	8004dbe <memset+0xa>
 8004dbc:	4770      	bx	lr
 8004dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc2:	e7f9      	b.n	8004db8 <memset+0x4>

08004dc4 <_close_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d06      	ldr	r5, [pc, #24]	@ (8004de0 <_close_r+0x1c>)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fc fc11 	bl	80015f6 <_close>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_close_r+0x1a>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_close_r+0x1a>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	200004f0 	.word	0x200004f0

08004de4 <_lseek_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4d07      	ldr	r5, [pc, #28]	@ (8004e04 <_lseek_r+0x20>)
 8004de8:	4604      	mov	r4, r0
 8004dea:	4608      	mov	r0, r1
 8004dec:	4611      	mov	r1, r2
 8004dee:	2200      	movs	r2, #0
 8004df0:	602a      	str	r2, [r5, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f7fc fc26 	bl	8001644 <_lseek>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	d102      	bne.n	8004e02 <_lseek_r+0x1e>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b103      	cbz	r3, 8004e02 <_lseek_r+0x1e>
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	200004f0 	.word	0x200004f0

08004e08 <_read_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4d07      	ldr	r5, [pc, #28]	@ (8004e28 <_read_r+0x20>)
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	4608      	mov	r0, r1
 8004e10:	4611      	mov	r1, r2
 8004e12:	2200      	movs	r2, #0
 8004e14:	602a      	str	r2, [r5, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f7fc fbb4 	bl	8001584 <_read>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d102      	bne.n	8004e26 <_read_r+0x1e>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	b103      	cbz	r3, 8004e26 <_read_r+0x1e>
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	200004f0 	.word	0x200004f0

08004e2c <_write_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4d07      	ldr	r5, [pc, #28]	@ (8004e4c <_write_r+0x20>)
 8004e30:	4604      	mov	r4, r0
 8004e32:	4608      	mov	r0, r1
 8004e34:	4611      	mov	r1, r2
 8004e36:	2200      	movs	r2, #0
 8004e38:	602a      	str	r2, [r5, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f7fc fbbf 	bl	80015be <_write>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d102      	bne.n	8004e4a <_write_r+0x1e>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	b103      	cbz	r3, 8004e4a <_write_r+0x1e>
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	200004f0 	.word	0x200004f0

08004e50 <__errno>:
 8004e50:	4b01      	ldr	r3, [pc, #4]	@ (8004e58 <__errno+0x8>)
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	2000004c 	.word	0x2000004c

08004e5c <__libc_init_array>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e94 <__libc_init_array+0x38>)
 8004e60:	4c0d      	ldr	r4, [pc, #52]	@ (8004e98 <__libc_init_array+0x3c>)
 8004e62:	1b64      	subs	r4, r4, r5
 8004e64:	10a4      	asrs	r4, r4, #2
 8004e66:	2600      	movs	r6, #0
 8004e68:	42a6      	cmp	r6, r4
 8004e6a:	d109      	bne.n	8004e80 <__libc_init_array+0x24>
 8004e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e9c <__libc_init_array+0x40>)
 8004e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004ea0 <__libc_init_array+0x44>)
 8004e70:	f000 fd58 	bl	8005924 <_init>
 8004e74:	1b64      	subs	r4, r4, r5
 8004e76:	10a4      	asrs	r4, r4, #2
 8004e78:	2600      	movs	r6, #0
 8004e7a:	42a6      	cmp	r6, r4
 8004e7c:	d105      	bne.n	8004e8a <__libc_init_array+0x2e>
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e84:	4798      	blx	r3
 8004e86:	3601      	adds	r6, #1
 8004e88:	e7ee      	b.n	8004e68 <__libc_init_array+0xc>
 8004e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8e:	4798      	blx	r3
 8004e90:	3601      	adds	r6, #1
 8004e92:	e7f2      	b.n	8004e7a <__libc_init_array+0x1e>
 8004e94:	08005c18 	.word	0x08005c18
 8004e98:	08005c18 	.word	0x08005c18
 8004e9c:	08005c18 	.word	0x08005c18
 8004ea0:	08005c1c 	.word	0x08005c1c

08004ea4 <__retarget_lock_init_recursive>:
 8004ea4:	4770      	bx	lr

08004ea6 <__retarget_lock_acquire_recursive>:
 8004ea6:	4770      	bx	lr

08004ea8 <__retarget_lock_release_recursive>:
 8004ea8:	4770      	bx	lr
	...

08004eac <_free_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4605      	mov	r5, r0
 8004eb0:	2900      	cmp	r1, #0
 8004eb2:	d041      	beq.n	8004f38 <_free_r+0x8c>
 8004eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb8:	1f0c      	subs	r4, r1, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bfb8      	it	lt
 8004ebe:	18e4      	addlt	r4, r4, r3
 8004ec0:	f000 f8e0 	bl	8005084 <__malloc_lock>
 8004ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f3c <_free_r+0x90>)
 8004ec6:	6813      	ldr	r3, [r2, #0]
 8004ec8:	b933      	cbnz	r3, 8004ed8 <_free_r+0x2c>
 8004eca:	6063      	str	r3, [r4, #4]
 8004ecc:	6014      	str	r4, [r2, #0]
 8004ece:	4628      	mov	r0, r5
 8004ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ed4:	f000 b8dc 	b.w	8005090 <__malloc_unlock>
 8004ed8:	42a3      	cmp	r3, r4
 8004eda:	d908      	bls.n	8004eee <_free_r+0x42>
 8004edc:	6820      	ldr	r0, [r4, #0]
 8004ede:	1821      	adds	r1, r4, r0
 8004ee0:	428b      	cmp	r3, r1
 8004ee2:	bf01      	itttt	eq
 8004ee4:	6819      	ldreq	r1, [r3, #0]
 8004ee6:	685b      	ldreq	r3, [r3, #4]
 8004ee8:	1809      	addeq	r1, r1, r0
 8004eea:	6021      	streq	r1, [r4, #0]
 8004eec:	e7ed      	b.n	8004eca <_free_r+0x1e>
 8004eee:	461a      	mov	r2, r3
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	b10b      	cbz	r3, 8004ef8 <_free_r+0x4c>
 8004ef4:	42a3      	cmp	r3, r4
 8004ef6:	d9fa      	bls.n	8004eee <_free_r+0x42>
 8004ef8:	6811      	ldr	r1, [r2, #0]
 8004efa:	1850      	adds	r0, r2, r1
 8004efc:	42a0      	cmp	r0, r4
 8004efe:	d10b      	bne.n	8004f18 <_free_r+0x6c>
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	4401      	add	r1, r0
 8004f04:	1850      	adds	r0, r2, r1
 8004f06:	4283      	cmp	r3, r0
 8004f08:	6011      	str	r1, [r2, #0]
 8004f0a:	d1e0      	bne.n	8004ece <_free_r+0x22>
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	6053      	str	r3, [r2, #4]
 8004f12:	4408      	add	r0, r1
 8004f14:	6010      	str	r0, [r2, #0]
 8004f16:	e7da      	b.n	8004ece <_free_r+0x22>
 8004f18:	d902      	bls.n	8004f20 <_free_r+0x74>
 8004f1a:	230c      	movs	r3, #12
 8004f1c:	602b      	str	r3, [r5, #0]
 8004f1e:	e7d6      	b.n	8004ece <_free_r+0x22>
 8004f20:	6820      	ldr	r0, [r4, #0]
 8004f22:	1821      	adds	r1, r4, r0
 8004f24:	428b      	cmp	r3, r1
 8004f26:	bf04      	itt	eq
 8004f28:	6819      	ldreq	r1, [r3, #0]
 8004f2a:	685b      	ldreq	r3, [r3, #4]
 8004f2c:	6063      	str	r3, [r4, #4]
 8004f2e:	bf04      	itt	eq
 8004f30:	1809      	addeq	r1, r1, r0
 8004f32:	6021      	streq	r1, [r4, #0]
 8004f34:	6054      	str	r4, [r2, #4]
 8004f36:	e7ca      	b.n	8004ece <_free_r+0x22>
 8004f38:	bd38      	pop	{r3, r4, r5, pc}
 8004f3a:	bf00      	nop
 8004f3c:	200004fc 	.word	0x200004fc

08004f40 <sbrk_aligned>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	4e0f      	ldr	r6, [pc, #60]	@ (8004f80 <sbrk_aligned+0x40>)
 8004f44:	460c      	mov	r4, r1
 8004f46:	6831      	ldr	r1, [r6, #0]
 8004f48:	4605      	mov	r5, r0
 8004f4a:	b911      	cbnz	r1, 8004f52 <sbrk_aligned+0x12>
 8004f4c:	f000 fcda 	bl	8005904 <_sbrk_r>
 8004f50:	6030      	str	r0, [r6, #0]
 8004f52:	4621      	mov	r1, r4
 8004f54:	4628      	mov	r0, r5
 8004f56:	f000 fcd5 	bl	8005904 <_sbrk_r>
 8004f5a:	1c43      	adds	r3, r0, #1
 8004f5c:	d103      	bne.n	8004f66 <sbrk_aligned+0x26>
 8004f5e:	f04f 34ff 	mov.w	r4, #4294967295
 8004f62:	4620      	mov	r0, r4
 8004f64:	bd70      	pop	{r4, r5, r6, pc}
 8004f66:	1cc4      	adds	r4, r0, #3
 8004f68:	f024 0403 	bic.w	r4, r4, #3
 8004f6c:	42a0      	cmp	r0, r4
 8004f6e:	d0f8      	beq.n	8004f62 <sbrk_aligned+0x22>
 8004f70:	1a21      	subs	r1, r4, r0
 8004f72:	4628      	mov	r0, r5
 8004f74:	f000 fcc6 	bl	8005904 <_sbrk_r>
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d1f2      	bne.n	8004f62 <sbrk_aligned+0x22>
 8004f7c:	e7ef      	b.n	8004f5e <sbrk_aligned+0x1e>
 8004f7e:	bf00      	nop
 8004f80:	200004f8 	.word	0x200004f8

08004f84 <_malloc_r>:
 8004f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f88:	1ccd      	adds	r5, r1, #3
 8004f8a:	f025 0503 	bic.w	r5, r5, #3
 8004f8e:	3508      	adds	r5, #8
 8004f90:	2d0c      	cmp	r5, #12
 8004f92:	bf38      	it	cc
 8004f94:	250c      	movcc	r5, #12
 8004f96:	2d00      	cmp	r5, #0
 8004f98:	4606      	mov	r6, r0
 8004f9a:	db01      	blt.n	8004fa0 <_malloc_r+0x1c>
 8004f9c:	42a9      	cmp	r1, r5
 8004f9e:	d904      	bls.n	8004faa <_malloc_r+0x26>
 8004fa0:	230c      	movs	r3, #12
 8004fa2:	6033      	str	r3, [r6, #0]
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004faa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005080 <_malloc_r+0xfc>
 8004fae:	f000 f869 	bl	8005084 <__malloc_lock>
 8004fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8004fb6:	461c      	mov	r4, r3
 8004fb8:	bb44      	cbnz	r4, 800500c <_malloc_r+0x88>
 8004fba:	4629      	mov	r1, r5
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f7ff ffbf 	bl	8004f40 <sbrk_aligned>
 8004fc2:	1c43      	adds	r3, r0, #1
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	d158      	bne.n	800507a <_malloc_r+0xf6>
 8004fc8:	f8d8 4000 	ldr.w	r4, [r8]
 8004fcc:	4627      	mov	r7, r4
 8004fce:	2f00      	cmp	r7, #0
 8004fd0:	d143      	bne.n	800505a <_malloc_r+0xd6>
 8004fd2:	2c00      	cmp	r4, #0
 8004fd4:	d04b      	beq.n	800506e <_malloc_r+0xea>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	4639      	mov	r1, r7
 8004fda:	4630      	mov	r0, r6
 8004fdc:	eb04 0903 	add.w	r9, r4, r3
 8004fe0:	f000 fc90 	bl	8005904 <_sbrk_r>
 8004fe4:	4581      	cmp	r9, r0
 8004fe6:	d142      	bne.n	800506e <_malloc_r+0xea>
 8004fe8:	6821      	ldr	r1, [r4, #0]
 8004fea:	1a6d      	subs	r5, r5, r1
 8004fec:	4629      	mov	r1, r5
 8004fee:	4630      	mov	r0, r6
 8004ff0:	f7ff ffa6 	bl	8004f40 <sbrk_aligned>
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d03a      	beq.n	800506e <_malloc_r+0xea>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	442b      	add	r3, r5
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	bb62      	cbnz	r2, 8005060 <_malloc_r+0xdc>
 8005006:	f8c8 7000 	str.w	r7, [r8]
 800500a:	e00f      	b.n	800502c <_malloc_r+0xa8>
 800500c:	6822      	ldr	r2, [r4, #0]
 800500e:	1b52      	subs	r2, r2, r5
 8005010:	d420      	bmi.n	8005054 <_malloc_r+0xd0>
 8005012:	2a0b      	cmp	r2, #11
 8005014:	d917      	bls.n	8005046 <_malloc_r+0xc2>
 8005016:	1961      	adds	r1, r4, r5
 8005018:	42a3      	cmp	r3, r4
 800501a:	6025      	str	r5, [r4, #0]
 800501c:	bf18      	it	ne
 800501e:	6059      	strne	r1, [r3, #4]
 8005020:	6863      	ldr	r3, [r4, #4]
 8005022:	bf08      	it	eq
 8005024:	f8c8 1000 	streq.w	r1, [r8]
 8005028:	5162      	str	r2, [r4, r5]
 800502a:	604b      	str	r3, [r1, #4]
 800502c:	4630      	mov	r0, r6
 800502e:	f000 f82f 	bl	8005090 <__malloc_unlock>
 8005032:	f104 000b 	add.w	r0, r4, #11
 8005036:	1d23      	adds	r3, r4, #4
 8005038:	f020 0007 	bic.w	r0, r0, #7
 800503c:	1ac2      	subs	r2, r0, r3
 800503e:	bf1c      	itt	ne
 8005040:	1a1b      	subne	r3, r3, r0
 8005042:	50a3      	strne	r3, [r4, r2]
 8005044:	e7af      	b.n	8004fa6 <_malloc_r+0x22>
 8005046:	6862      	ldr	r2, [r4, #4]
 8005048:	42a3      	cmp	r3, r4
 800504a:	bf0c      	ite	eq
 800504c:	f8c8 2000 	streq.w	r2, [r8]
 8005050:	605a      	strne	r2, [r3, #4]
 8005052:	e7eb      	b.n	800502c <_malloc_r+0xa8>
 8005054:	4623      	mov	r3, r4
 8005056:	6864      	ldr	r4, [r4, #4]
 8005058:	e7ae      	b.n	8004fb8 <_malloc_r+0x34>
 800505a:	463c      	mov	r4, r7
 800505c:	687f      	ldr	r7, [r7, #4]
 800505e:	e7b6      	b.n	8004fce <_malloc_r+0x4a>
 8005060:	461a      	mov	r2, r3
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	42a3      	cmp	r3, r4
 8005066:	d1fb      	bne.n	8005060 <_malloc_r+0xdc>
 8005068:	2300      	movs	r3, #0
 800506a:	6053      	str	r3, [r2, #4]
 800506c:	e7de      	b.n	800502c <_malloc_r+0xa8>
 800506e:	230c      	movs	r3, #12
 8005070:	6033      	str	r3, [r6, #0]
 8005072:	4630      	mov	r0, r6
 8005074:	f000 f80c 	bl	8005090 <__malloc_unlock>
 8005078:	e794      	b.n	8004fa4 <_malloc_r+0x20>
 800507a:	6005      	str	r5, [r0, #0]
 800507c:	e7d6      	b.n	800502c <_malloc_r+0xa8>
 800507e:	bf00      	nop
 8005080:	200004fc 	.word	0x200004fc

08005084 <__malloc_lock>:
 8005084:	4801      	ldr	r0, [pc, #4]	@ (800508c <__malloc_lock+0x8>)
 8005086:	f7ff bf0e 	b.w	8004ea6 <__retarget_lock_acquire_recursive>
 800508a:	bf00      	nop
 800508c:	200004f4 	.word	0x200004f4

08005090 <__malloc_unlock>:
 8005090:	4801      	ldr	r0, [pc, #4]	@ (8005098 <__malloc_unlock+0x8>)
 8005092:	f7ff bf09 	b.w	8004ea8 <__retarget_lock_release_recursive>
 8005096:	bf00      	nop
 8005098:	200004f4 	.word	0x200004f4

0800509c <__sfputc_r>:
 800509c:	6893      	ldr	r3, [r2, #8]
 800509e:	3b01      	subs	r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	b410      	push	{r4}
 80050a4:	6093      	str	r3, [r2, #8]
 80050a6:	da08      	bge.n	80050ba <__sfputc_r+0x1e>
 80050a8:	6994      	ldr	r4, [r2, #24]
 80050aa:	42a3      	cmp	r3, r4
 80050ac:	db01      	blt.n	80050b2 <__sfputc_r+0x16>
 80050ae:	290a      	cmp	r1, #10
 80050b0:	d103      	bne.n	80050ba <__sfputc_r+0x1e>
 80050b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050b6:	f7ff bde8 	b.w	8004c8a <__swbuf_r>
 80050ba:	6813      	ldr	r3, [r2, #0]
 80050bc:	1c58      	adds	r0, r3, #1
 80050be:	6010      	str	r0, [r2, #0]
 80050c0:	7019      	strb	r1, [r3, #0]
 80050c2:	4608      	mov	r0, r1
 80050c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <__sfputs_r>:
 80050ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050cc:	4606      	mov	r6, r0
 80050ce:	460f      	mov	r7, r1
 80050d0:	4614      	mov	r4, r2
 80050d2:	18d5      	adds	r5, r2, r3
 80050d4:	42ac      	cmp	r4, r5
 80050d6:	d101      	bne.n	80050dc <__sfputs_r+0x12>
 80050d8:	2000      	movs	r0, #0
 80050da:	e007      	b.n	80050ec <__sfputs_r+0x22>
 80050dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050e0:	463a      	mov	r2, r7
 80050e2:	4630      	mov	r0, r6
 80050e4:	f7ff ffda 	bl	800509c <__sfputc_r>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d1f3      	bne.n	80050d4 <__sfputs_r+0xa>
 80050ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050f0 <_vfiprintf_r>:
 80050f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f4:	460d      	mov	r5, r1
 80050f6:	b09d      	sub	sp, #116	@ 0x74
 80050f8:	4614      	mov	r4, r2
 80050fa:	4698      	mov	r8, r3
 80050fc:	4606      	mov	r6, r0
 80050fe:	b118      	cbz	r0, 8005108 <_vfiprintf_r+0x18>
 8005100:	6a03      	ldr	r3, [r0, #32]
 8005102:	b90b      	cbnz	r3, 8005108 <_vfiprintf_r+0x18>
 8005104:	f7ff fcd0 	bl	8004aa8 <__sinit>
 8005108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800510a:	07d9      	lsls	r1, r3, #31
 800510c:	d405      	bmi.n	800511a <_vfiprintf_r+0x2a>
 800510e:	89ab      	ldrh	r3, [r5, #12]
 8005110:	059a      	lsls	r2, r3, #22
 8005112:	d402      	bmi.n	800511a <_vfiprintf_r+0x2a>
 8005114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005116:	f7ff fec6 	bl	8004ea6 <__retarget_lock_acquire_recursive>
 800511a:	89ab      	ldrh	r3, [r5, #12]
 800511c:	071b      	lsls	r3, r3, #28
 800511e:	d501      	bpl.n	8005124 <_vfiprintf_r+0x34>
 8005120:	692b      	ldr	r3, [r5, #16]
 8005122:	b99b      	cbnz	r3, 800514c <_vfiprintf_r+0x5c>
 8005124:	4629      	mov	r1, r5
 8005126:	4630      	mov	r0, r6
 8005128:	f7ff fdee 	bl	8004d08 <__swsetup_r>
 800512c:	b170      	cbz	r0, 800514c <_vfiprintf_r+0x5c>
 800512e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005130:	07dc      	lsls	r4, r3, #31
 8005132:	d504      	bpl.n	800513e <_vfiprintf_r+0x4e>
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	b01d      	add	sp, #116	@ 0x74
 800513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513e:	89ab      	ldrh	r3, [r5, #12]
 8005140:	0598      	lsls	r0, r3, #22
 8005142:	d4f7      	bmi.n	8005134 <_vfiprintf_r+0x44>
 8005144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005146:	f7ff feaf 	bl	8004ea8 <__retarget_lock_release_recursive>
 800514a:	e7f3      	b.n	8005134 <_vfiprintf_r+0x44>
 800514c:	2300      	movs	r3, #0
 800514e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005150:	2320      	movs	r3, #32
 8005152:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005156:	f8cd 800c 	str.w	r8, [sp, #12]
 800515a:	2330      	movs	r3, #48	@ 0x30
 800515c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800530c <_vfiprintf_r+0x21c>
 8005160:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005164:	f04f 0901 	mov.w	r9, #1
 8005168:	4623      	mov	r3, r4
 800516a:	469a      	mov	sl, r3
 800516c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005170:	b10a      	cbz	r2, 8005176 <_vfiprintf_r+0x86>
 8005172:	2a25      	cmp	r2, #37	@ 0x25
 8005174:	d1f9      	bne.n	800516a <_vfiprintf_r+0x7a>
 8005176:	ebba 0b04 	subs.w	fp, sl, r4
 800517a:	d00b      	beq.n	8005194 <_vfiprintf_r+0xa4>
 800517c:	465b      	mov	r3, fp
 800517e:	4622      	mov	r2, r4
 8005180:	4629      	mov	r1, r5
 8005182:	4630      	mov	r0, r6
 8005184:	f7ff ffa1 	bl	80050ca <__sfputs_r>
 8005188:	3001      	adds	r0, #1
 800518a:	f000 80a7 	beq.w	80052dc <_vfiprintf_r+0x1ec>
 800518e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005190:	445a      	add	r2, fp
 8005192:	9209      	str	r2, [sp, #36]	@ 0x24
 8005194:	f89a 3000 	ldrb.w	r3, [sl]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 809f 	beq.w	80052dc <_vfiprintf_r+0x1ec>
 800519e:	2300      	movs	r3, #0
 80051a0:	f04f 32ff 	mov.w	r2, #4294967295
 80051a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051a8:	f10a 0a01 	add.w	sl, sl, #1
 80051ac:	9304      	str	r3, [sp, #16]
 80051ae:	9307      	str	r3, [sp, #28]
 80051b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80051b6:	4654      	mov	r4, sl
 80051b8:	2205      	movs	r2, #5
 80051ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051be:	4853      	ldr	r0, [pc, #332]	@ (800530c <_vfiprintf_r+0x21c>)
 80051c0:	f7fb f82e 	bl	8000220 <memchr>
 80051c4:	9a04      	ldr	r2, [sp, #16]
 80051c6:	b9d8      	cbnz	r0, 8005200 <_vfiprintf_r+0x110>
 80051c8:	06d1      	lsls	r1, r2, #27
 80051ca:	bf44      	itt	mi
 80051cc:	2320      	movmi	r3, #32
 80051ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051d2:	0713      	lsls	r3, r2, #28
 80051d4:	bf44      	itt	mi
 80051d6:	232b      	movmi	r3, #43	@ 0x2b
 80051d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051dc:	f89a 3000 	ldrb.w	r3, [sl]
 80051e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80051e2:	d015      	beq.n	8005210 <_vfiprintf_r+0x120>
 80051e4:	9a07      	ldr	r2, [sp, #28]
 80051e6:	4654      	mov	r4, sl
 80051e8:	2000      	movs	r0, #0
 80051ea:	f04f 0c0a 	mov.w	ip, #10
 80051ee:	4621      	mov	r1, r4
 80051f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051f4:	3b30      	subs	r3, #48	@ 0x30
 80051f6:	2b09      	cmp	r3, #9
 80051f8:	d94b      	bls.n	8005292 <_vfiprintf_r+0x1a2>
 80051fa:	b1b0      	cbz	r0, 800522a <_vfiprintf_r+0x13a>
 80051fc:	9207      	str	r2, [sp, #28]
 80051fe:	e014      	b.n	800522a <_vfiprintf_r+0x13a>
 8005200:	eba0 0308 	sub.w	r3, r0, r8
 8005204:	fa09 f303 	lsl.w	r3, r9, r3
 8005208:	4313      	orrs	r3, r2
 800520a:	9304      	str	r3, [sp, #16]
 800520c:	46a2      	mov	sl, r4
 800520e:	e7d2      	b.n	80051b6 <_vfiprintf_r+0xc6>
 8005210:	9b03      	ldr	r3, [sp, #12]
 8005212:	1d19      	adds	r1, r3, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	9103      	str	r1, [sp, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	bfbb      	ittet	lt
 800521c:	425b      	neglt	r3, r3
 800521e:	f042 0202 	orrlt.w	r2, r2, #2
 8005222:	9307      	strge	r3, [sp, #28]
 8005224:	9307      	strlt	r3, [sp, #28]
 8005226:	bfb8      	it	lt
 8005228:	9204      	strlt	r2, [sp, #16]
 800522a:	7823      	ldrb	r3, [r4, #0]
 800522c:	2b2e      	cmp	r3, #46	@ 0x2e
 800522e:	d10a      	bne.n	8005246 <_vfiprintf_r+0x156>
 8005230:	7863      	ldrb	r3, [r4, #1]
 8005232:	2b2a      	cmp	r3, #42	@ 0x2a
 8005234:	d132      	bne.n	800529c <_vfiprintf_r+0x1ac>
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	1d1a      	adds	r2, r3, #4
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	9203      	str	r2, [sp, #12]
 800523e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005242:	3402      	adds	r4, #2
 8005244:	9305      	str	r3, [sp, #20]
 8005246:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800531c <_vfiprintf_r+0x22c>
 800524a:	7821      	ldrb	r1, [r4, #0]
 800524c:	2203      	movs	r2, #3
 800524e:	4650      	mov	r0, sl
 8005250:	f7fa ffe6 	bl	8000220 <memchr>
 8005254:	b138      	cbz	r0, 8005266 <_vfiprintf_r+0x176>
 8005256:	9b04      	ldr	r3, [sp, #16]
 8005258:	eba0 000a 	sub.w	r0, r0, sl
 800525c:	2240      	movs	r2, #64	@ 0x40
 800525e:	4082      	lsls	r2, r0
 8005260:	4313      	orrs	r3, r2
 8005262:	3401      	adds	r4, #1
 8005264:	9304      	str	r3, [sp, #16]
 8005266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800526a:	4829      	ldr	r0, [pc, #164]	@ (8005310 <_vfiprintf_r+0x220>)
 800526c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005270:	2206      	movs	r2, #6
 8005272:	f7fa ffd5 	bl	8000220 <memchr>
 8005276:	2800      	cmp	r0, #0
 8005278:	d03f      	beq.n	80052fa <_vfiprintf_r+0x20a>
 800527a:	4b26      	ldr	r3, [pc, #152]	@ (8005314 <_vfiprintf_r+0x224>)
 800527c:	bb1b      	cbnz	r3, 80052c6 <_vfiprintf_r+0x1d6>
 800527e:	9b03      	ldr	r3, [sp, #12]
 8005280:	3307      	adds	r3, #7
 8005282:	f023 0307 	bic.w	r3, r3, #7
 8005286:	3308      	adds	r3, #8
 8005288:	9303      	str	r3, [sp, #12]
 800528a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800528c:	443b      	add	r3, r7
 800528e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005290:	e76a      	b.n	8005168 <_vfiprintf_r+0x78>
 8005292:	fb0c 3202 	mla	r2, ip, r2, r3
 8005296:	460c      	mov	r4, r1
 8005298:	2001      	movs	r0, #1
 800529a:	e7a8      	b.n	80051ee <_vfiprintf_r+0xfe>
 800529c:	2300      	movs	r3, #0
 800529e:	3401      	adds	r4, #1
 80052a0:	9305      	str	r3, [sp, #20]
 80052a2:	4619      	mov	r1, r3
 80052a4:	f04f 0c0a 	mov.w	ip, #10
 80052a8:	4620      	mov	r0, r4
 80052aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052ae:	3a30      	subs	r2, #48	@ 0x30
 80052b0:	2a09      	cmp	r2, #9
 80052b2:	d903      	bls.n	80052bc <_vfiprintf_r+0x1cc>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0c6      	beq.n	8005246 <_vfiprintf_r+0x156>
 80052b8:	9105      	str	r1, [sp, #20]
 80052ba:	e7c4      	b.n	8005246 <_vfiprintf_r+0x156>
 80052bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80052c0:	4604      	mov	r4, r0
 80052c2:	2301      	movs	r3, #1
 80052c4:	e7f0      	b.n	80052a8 <_vfiprintf_r+0x1b8>
 80052c6:	ab03      	add	r3, sp, #12
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	462a      	mov	r2, r5
 80052cc:	4b12      	ldr	r3, [pc, #72]	@ (8005318 <_vfiprintf_r+0x228>)
 80052ce:	a904      	add	r1, sp, #16
 80052d0:	4630      	mov	r0, r6
 80052d2:	f3af 8000 	nop.w
 80052d6:	4607      	mov	r7, r0
 80052d8:	1c78      	adds	r0, r7, #1
 80052da:	d1d6      	bne.n	800528a <_vfiprintf_r+0x19a>
 80052dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052de:	07d9      	lsls	r1, r3, #31
 80052e0:	d405      	bmi.n	80052ee <_vfiprintf_r+0x1fe>
 80052e2:	89ab      	ldrh	r3, [r5, #12]
 80052e4:	059a      	lsls	r2, r3, #22
 80052e6:	d402      	bmi.n	80052ee <_vfiprintf_r+0x1fe>
 80052e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052ea:	f7ff fddd 	bl	8004ea8 <__retarget_lock_release_recursive>
 80052ee:	89ab      	ldrh	r3, [r5, #12]
 80052f0:	065b      	lsls	r3, r3, #25
 80052f2:	f53f af1f 	bmi.w	8005134 <_vfiprintf_r+0x44>
 80052f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052f8:	e71e      	b.n	8005138 <_vfiprintf_r+0x48>
 80052fa:	ab03      	add	r3, sp, #12
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	462a      	mov	r2, r5
 8005300:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <_vfiprintf_r+0x228>)
 8005302:	a904      	add	r1, sp, #16
 8005304:	4630      	mov	r0, r6
 8005306:	f000 f879 	bl	80053fc <_printf_i>
 800530a:	e7e4      	b.n	80052d6 <_vfiprintf_r+0x1e6>
 800530c:	08005bdc 	.word	0x08005bdc
 8005310:	08005be6 	.word	0x08005be6
 8005314:	00000000 	.word	0x00000000
 8005318:	080050cb 	.word	0x080050cb
 800531c:	08005be2 	.word	0x08005be2

08005320 <_printf_common>:
 8005320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005324:	4616      	mov	r6, r2
 8005326:	4698      	mov	r8, r3
 8005328:	688a      	ldr	r2, [r1, #8]
 800532a:	690b      	ldr	r3, [r1, #16]
 800532c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005330:	4293      	cmp	r3, r2
 8005332:	bfb8      	it	lt
 8005334:	4613      	movlt	r3, r2
 8005336:	6033      	str	r3, [r6, #0]
 8005338:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800533c:	4607      	mov	r7, r0
 800533e:	460c      	mov	r4, r1
 8005340:	b10a      	cbz	r2, 8005346 <_printf_common+0x26>
 8005342:	3301      	adds	r3, #1
 8005344:	6033      	str	r3, [r6, #0]
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	0699      	lsls	r1, r3, #26
 800534a:	bf42      	ittt	mi
 800534c:	6833      	ldrmi	r3, [r6, #0]
 800534e:	3302      	addmi	r3, #2
 8005350:	6033      	strmi	r3, [r6, #0]
 8005352:	6825      	ldr	r5, [r4, #0]
 8005354:	f015 0506 	ands.w	r5, r5, #6
 8005358:	d106      	bne.n	8005368 <_printf_common+0x48>
 800535a:	f104 0a19 	add.w	sl, r4, #25
 800535e:	68e3      	ldr	r3, [r4, #12]
 8005360:	6832      	ldr	r2, [r6, #0]
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	42ab      	cmp	r3, r5
 8005366:	dc26      	bgt.n	80053b6 <_printf_common+0x96>
 8005368:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800536c:	6822      	ldr	r2, [r4, #0]
 800536e:	3b00      	subs	r3, #0
 8005370:	bf18      	it	ne
 8005372:	2301      	movne	r3, #1
 8005374:	0692      	lsls	r2, r2, #26
 8005376:	d42b      	bmi.n	80053d0 <_printf_common+0xb0>
 8005378:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800537c:	4641      	mov	r1, r8
 800537e:	4638      	mov	r0, r7
 8005380:	47c8      	blx	r9
 8005382:	3001      	adds	r0, #1
 8005384:	d01e      	beq.n	80053c4 <_printf_common+0xa4>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	6922      	ldr	r2, [r4, #16]
 800538a:	f003 0306 	and.w	r3, r3, #6
 800538e:	2b04      	cmp	r3, #4
 8005390:	bf02      	ittt	eq
 8005392:	68e5      	ldreq	r5, [r4, #12]
 8005394:	6833      	ldreq	r3, [r6, #0]
 8005396:	1aed      	subeq	r5, r5, r3
 8005398:	68a3      	ldr	r3, [r4, #8]
 800539a:	bf0c      	ite	eq
 800539c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053a0:	2500      	movne	r5, #0
 80053a2:	4293      	cmp	r3, r2
 80053a4:	bfc4      	itt	gt
 80053a6:	1a9b      	subgt	r3, r3, r2
 80053a8:	18ed      	addgt	r5, r5, r3
 80053aa:	2600      	movs	r6, #0
 80053ac:	341a      	adds	r4, #26
 80053ae:	42b5      	cmp	r5, r6
 80053b0:	d11a      	bne.n	80053e8 <_printf_common+0xc8>
 80053b2:	2000      	movs	r0, #0
 80053b4:	e008      	b.n	80053c8 <_printf_common+0xa8>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4652      	mov	r2, sl
 80053ba:	4641      	mov	r1, r8
 80053bc:	4638      	mov	r0, r7
 80053be:	47c8      	blx	r9
 80053c0:	3001      	adds	r0, #1
 80053c2:	d103      	bne.n	80053cc <_printf_common+0xac>
 80053c4:	f04f 30ff 	mov.w	r0, #4294967295
 80053c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053cc:	3501      	adds	r5, #1
 80053ce:	e7c6      	b.n	800535e <_printf_common+0x3e>
 80053d0:	18e1      	adds	r1, r4, r3
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	2030      	movs	r0, #48	@ 0x30
 80053d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053da:	4422      	add	r2, r4
 80053dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053e4:	3302      	adds	r3, #2
 80053e6:	e7c7      	b.n	8005378 <_printf_common+0x58>
 80053e8:	2301      	movs	r3, #1
 80053ea:	4622      	mov	r2, r4
 80053ec:	4641      	mov	r1, r8
 80053ee:	4638      	mov	r0, r7
 80053f0:	47c8      	blx	r9
 80053f2:	3001      	adds	r0, #1
 80053f4:	d0e6      	beq.n	80053c4 <_printf_common+0xa4>
 80053f6:	3601      	adds	r6, #1
 80053f8:	e7d9      	b.n	80053ae <_printf_common+0x8e>
	...

080053fc <_printf_i>:
 80053fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	7e0f      	ldrb	r7, [r1, #24]
 8005402:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005404:	2f78      	cmp	r7, #120	@ 0x78
 8005406:	4691      	mov	r9, r2
 8005408:	4680      	mov	r8, r0
 800540a:	460c      	mov	r4, r1
 800540c:	469a      	mov	sl, r3
 800540e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005412:	d807      	bhi.n	8005424 <_printf_i+0x28>
 8005414:	2f62      	cmp	r7, #98	@ 0x62
 8005416:	d80a      	bhi.n	800542e <_printf_i+0x32>
 8005418:	2f00      	cmp	r7, #0
 800541a:	f000 80d2 	beq.w	80055c2 <_printf_i+0x1c6>
 800541e:	2f58      	cmp	r7, #88	@ 0x58
 8005420:	f000 80b9 	beq.w	8005596 <_printf_i+0x19a>
 8005424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005428:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800542c:	e03a      	b.n	80054a4 <_printf_i+0xa8>
 800542e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005432:	2b15      	cmp	r3, #21
 8005434:	d8f6      	bhi.n	8005424 <_printf_i+0x28>
 8005436:	a101      	add	r1, pc, #4	@ (adr r1, 800543c <_printf_i+0x40>)
 8005438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800543c:	08005495 	.word	0x08005495
 8005440:	080054a9 	.word	0x080054a9
 8005444:	08005425 	.word	0x08005425
 8005448:	08005425 	.word	0x08005425
 800544c:	08005425 	.word	0x08005425
 8005450:	08005425 	.word	0x08005425
 8005454:	080054a9 	.word	0x080054a9
 8005458:	08005425 	.word	0x08005425
 800545c:	08005425 	.word	0x08005425
 8005460:	08005425 	.word	0x08005425
 8005464:	08005425 	.word	0x08005425
 8005468:	080055a9 	.word	0x080055a9
 800546c:	080054d3 	.word	0x080054d3
 8005470:	08005563 	.word	0x08005563
 8005474:	08005425 	.word	0x08005425
 8005478:	08005425 	.word	0x08005425
 800547c:	080055cb 	.word	0x080055cb
 8005480:	08005425 	.word	0x08005425
 8005484:	080054d3 	.word	0x080054d3
 8005488:	08005425 	.word	0x08005425
 800548c:	08005425 	.word	0x08005425
 8005490:	0800556b 	.word	0x0800556b
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	1d1a      	adds	r2, r3, #4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6032      	str	r2, [r6, #0]
 800549c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054a4:	2301      	movs	r3, #1
 80054a6:	e09d      	b.n	80055e4 <_printf_i+0x1e8>
 80054a8:	6833      	ldr	r3, [r6, #0]
 80054aa:	6820      	ldr	r0, [r4, #0]
 80054ac:	1d19      	adds	r1, r3, #4
 80054ae:	6031      	str	r1, [r6, #0]
 80054b0:	0606      	lsls	r6, r0, #24
 80054b2:	d501      	bpl.n	80054b8 <_printf_i+0xbc>
 80054b4:	681d      	ldr	r5, [r3, #0]
 80054b6:	e003      	b.n	80054c0 <_printf_i+0xc4>
 80054b8:	0645      	lsls	r5, r0, #25
 80054ba:	d5fb      	bpl.n	80054b4 <_printf_i+0xb8>
 80054bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054c0:	2d00      	cmp	r5, #0
 80054c2:	da03      	bge.n	80054cc <_printf_i+0xd0>
 80054c4:	232d      	movs	r3, #45	@ 0x2d
 80054c6:	426d      	negs	r5, r5
 80054c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054cc:	4859      	ldr	r0, [pc, #356]	@ (8005634 <_printf_i+0x238>)
 80054ce:	230a      	movs	r3, #10
 80054d0:	e011      	b.n	80054f6 <_printf_i+0xfa>
 80054d2:	6821      	ldr	r1, [r4, #0]
 80054d4:	6833      	ldr	r3, [r6, #0]
 80054d6:	0608      	lsls	r0, r1, #24
 80054d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80054dc:	d402      	bmi.n	80054e4 <_printf_i+0xe8>
 80054de:	0649      	lsls	r1, r1, #25
 80054e0:	bf48      	it	mi
 80054e2:	b2ad      	uxthmi	r5, r5
 80054e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80054e6:	4853      	ldr	r0, [pc, #332]	@ (8005634 <_printf_i+0x238>)
 80054e8:	6033      	str	r3, [r6, #0]
 80054ea:	bf14      	ite	ne
 80054ec:	230a      	movne	r3, #10
 80054ee:	2308      	moveq	r3, #8
 80054f0:	2100      	movs	r1, #0
 80054f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054f6:	6866      	ldr	r6, [r4, #4]
 80054f8:	60a6      	str	r6, [r4, #8]
 80054fa:	2e00      	cmp	r6, #0
 80054fc:	bfa2      	ittt	ge
 80054fe:	6821      	ldrge	r1, [r4, #0]
 8005500:	f021 0104 	bicge.w	r1, r1, #4
 8005504:	6021      	strge	r1, [r4, #0]
 8005506:	b90d      	cbnz	r5, 800550c <_printf_i+0x110>
 8005508:	2e00      	cmp	r6, #0
 800550a:	d04b      	beq.n	80055a4 <_printf_i+0x1a8>
 800550c:	4616      	mov	r6, r2
 800550e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005512:	fb03 5711 	mls	r7, r3, r1, r5
 8005516:	5dc7      	ldrb	r7, [r0, r7]
 8005518:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800551c:	462f      	mov	r7, r5
 800551e:	42bb      	cmp	r3, r7
 8005520:	460d      	mov	r5, r1
 8005522:	d9f4      	bls.n	800550e <_printf_i+0x112>
 8005524:	2b08      	cmp	r3, #8
 8005526:	d10b      	bne.n	8005540 <_printf_i+0x144>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	07df      	lsls	r7, r3, #31
 800552c:	d508      	bpl.n	8005540 <_printf_i+0x144>
 800552e:	6923      	ldr	r3, [r4, #16]
 8005530:	6861      	ldr	r1, [r4, #4]
 8005532:	4299      	cmp	r1, r3
 8005534:	bfde      	ittt	le
 8005536:	2330      	movle	r3, #48	@ 0x30
 8005538:	f806 3c01 	strble.w	r3, [r6, #-1]
 800553c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005540:	1b92      	subs	r2, r2, r6
 8005542:	6122      	str	r2, [r4, #16]
 8005544:	f8cd a000 	str.w	sl, [sp]
 8005548:	464b      	mov	r3, r9
 800554a:	aa03      	add	r2, sp, #12
 800554c:	4621      	mov	r1, r4
 800554e:	4640      	mov	r0, r8
 8005550:	f7ff fee6 	bl	8005320 <_printf_common>
 8005554:	3001      	adds	r0, #1
 8005556:	d14a      	bne.n	80055ee <_printf_i+0x1f2>
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	b004      	add	sp, #16
 800555e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	f043 0320 	orr.w	r3, r3, #32
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	4833      	ldr	r0, [pc, #204]	@ (8005638 <_printf_i+0x23c>)
 800556c:	2778      	movs	r7, #120	@ 0x78
 800556e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	6831      	ldr	r1, [r6, #0]
 8005576:	061f      	lsls	r7, r3, #24
 8005578:	f851 5b04 	ldr.w	r5, [r1], #4
 800557c:	d402      	bmi.n	8005584 <_printf_i+0x188>
 800557e:	065f      	lsls	r7, r3, #25
 8005580:	bf48      	it	mi
 8005582:	b2ad      	uxthmi	r5, r5
 8005584:	6031      	str	r1, [r6, #0]
 8005586:	07d9      	lsls	r1, r3, #31
 8005588:	bf44      	itt	mi
 800558a:	f043 0320 	orrmi.w	r3, r3, #32
 800558e:	6023      	strmi	r3, [r4, #0]
 8005590:	b11d      	cbz	r5, 800559a <_printf_i+0x19e>
 8005592:	2310      	movs	r3, #16
 8005594:	e7ac      	b.n	80054f0 <_printf_i+0xf4>
 8005596:	4827      	ldr	r0, [pc, #156]	@ (8005634 <_printf_i+0x238>)
 8005598:	e7e9      	b.n	800556e <_printf_i+0x172>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	f023 0320 	bic.w	r3, r3, #32
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	e7f6      	b.n	8005592 <_printf_i+0x196>
 80055a4:	4616      	mov	r6, r2
 80055a6:	e7bd      	b.n	8005524 <_printf_i+0x128>
 80055a8:	6833      	ldr	r3, [r6, #0]
 80055aa:	6825      	ldr	r5, [r4, #0]
 80055ac:	6961      	ldr	r1, [r4, #20]
 80055ae:	1d18      	adds	r0, r3, #4
 80055b0:	6030      	str	r0, [r6, #0]
 80055b2:	062e      	lsls	r6, r5, #24
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	d501      	bpl.n	80055bc <_printf_i+0x1c0>
 80055b8:	6019      	str	r1, [r3, #0]
 80055ba:	e002      	b.n	80055c2 <_printf_i+0x1c6>
 80055bc:	0668      	lsls	r0, r5, #25
 80055be:	d5fb      	bpl.n	80055b8 <_printf_i+0x1bc>
 80055c0:	8019      	strh	r1, [r3, #0]
 80055c2:	2300      	movs	r3, #0
 80055c4:	6123      	str	r3, [r4, #16]
 80055c6:	4616      	mov	r6, r2
 80055c8:	e7bc      	b.n	8005544 <_printf_i+0x148>
 80055ca:	6833      	ldr	r3, [r6, #0]
 80055cc:	1d1a      	adds	r2, r3, #4
 80055ce:	6032      	str	r2, [r6, #0]
 80055d0:	681e      	ldr	r6, [r3, #0]
 80055d2:	6862      	ldr	r2, [r4, #4]
 80055d4:	2100      	movs	r1, #0
 80055d6:	4630      	mov	r0, r6
 80055d8:	f7fa fe22 	bl	8000220 <memchr>
 80055dc:	b108      	cbz	r0, 80055e2 <_printf_i+0x1e6>
 80055de:	1b80      	subs	r0, r0, r6
 80055e0:	6060      	str	r0, [r4, #4]
 80055e2:	6863      	ldr	r3, [r4, #4]
 80055e4:	6123      	str	r3, [r4, #16]
 80055e6:	2300      	movs	r3, #0
 80055e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ec:	e7aa      	b.n	8005544 <_printf_i+0x148>
 80055ee:	6923      	ldr	r3, [r4, #16]
 80055f0:	4632      	mov	r2, r6
 80055f2:	4649      	mov	r1, r9
 80055f4:	4640      	mov	r0, r8
 80055f6:	47d0      	blx	sl
 80055f8:	3001      	adds	r0, #1
 80055fa:	d0ad      	beq.n	8005558 <_printf_i+0x15c>
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	079b      	lsls	r3, r3, #30
 8005600:	d413      	bmi.n	800562a <_printf_i+0x22e>
 8005602:	68e0      	ldr	r0, [r4, #12]
 8005604:	9b03      	ldr	r3, [sp, #12]
 8005606:	4298      	cmp	r0, r3
 8005608:	bfb8      	it	lt
 800560a:	4618      	movlt	r0, r3
 800560c:	e7a6      	b.n	800555c <_printf_i+0x160>
 800560e:	2301      	movs	r3, #1
 8005610:	4632      	mov	r2, r6
 8005612:	4649      	mov	r1, r9
 8005614:	4640      	mov	r0, r8
 8005616:	47d0      	blx	sl
 8005618:	3001      	adds	r0, #1
 800561a:	d09d      	beq.n	8005558 <_printf_i+0x15c>
 800561c:	3501      	adds	r5, #1
 800561e:	68e3      	ldr	r3, [r4, #12]
 8005620:	9903      	ldr	r1, [sp, #12]
 8005622:	1a5b      	subs	r3, r3, r1
 8005624:	42ab      	cmp	r3, r5
 8005626:	dcf2      	bgt.n	800560e <_printf_i+0x212>
 8005628:	e7eb      	b.n	8005602 <_printf_i+0x206>
 800562a:	2500      	movs	r5, #0
 800562c:	f104 0619 	add.w	r6, r4, #25
 8005630:	e7f5      	b.n	800561e <_printf_i+0x222>
 8005632:	bf00      	nop
 8005634:	08005bed 	.word	0x08005bed
 8005638:	08005bfe 	.word	0x08005bfe

0800563c <__sflush_r>:
 800563c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005644:	0716      	lsls	r6, r2, #28
 8005646:	4605      	mov	r5, r0
 8005648:	460c      	mov	r4, r1
 800564a:	d454      	bmi.n	80056f6 <__sflush_r+0xba>
 800564c:	684b      	ldr	r3, [r1, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	dc02      	bgt.n	8005658 <__sflush_r+0x1c>
 8005652:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	dd48      	ble.n	80056ea <__sflush_r+0xae>
 8005658:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800565a:	2e00      	cmp	r6, #0
 800565c:	d045      	beq.n	80056ea <__sflush_r+0xae>
 800565e:	2300      	movs	r3, #0
 8005660:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005664:	682f      	ldr	r7, [r5, #0]
 8005666:	6a21      	ldr	r1, [r4, #32]
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	d030      	beq.n	80056ce <__sflush_r+0x92>
 800566c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800566e:	89a3      	ldrh	r3, [r4, #12]
 8005670:	0759      	lsls	r1, r3, #29
 8005672:	d505      	bpl.n	8005680 <__sflush_r+0x44>
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	1ad2      	subs	r2, r2, r3
 8005678:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800567a:	b10b      	cbz	r3, 8005680 <__sflush_r+0x44>
 800567c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800567e:	1ad2      	subs	r2, r2, r3
 8005680:	2300      	movs	r3, #0
 8005682:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005684:	6a21      	ldr	r1, [r4, #32]
 8005686:	4628      	mov	r0, r5
 8005688:	47b0      	blx	r6
 800568a:	1c43      	adds	r3, r0, #1
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	d106      	bne.n	800569e <__sflush_r+0x62>
 8005690:	6829      	ldr	r1, [r5, #0]
 8005692:	291d      	cmp	r1, #29
 8005694:	d82b      	bhi.n	80056ee <__sflush_r+0xb2>
 8005696:	4a2a      	ldr	r2, [pc, #168]	@ (8005740 <__sflush_r+0x104>)
 8005698:	410a      	asrs	r2, r1
 800569a:	07d6      	lsls	r6, r2, #31
 800569c:	d427      	bmi.n	80056ee <__sflush_r+0xb2>
 800569e:	2200      	movs	r2, #0
 80056a0:	6062      	str	r2, [r4, #4]
 80056a2:	04d9      	lsls	r1, r3, #19
 80056a4:	6922      	ldr	r2, [r4, #16]
 80056a6:	6022      	str	r2, [r4, #0]
 80056a8:	d504      	bpl.n	80056b4 <__sflush_r+0x78>
 80056aa:	1c42      	adds	r2, r0, #1
 80056ac:	d101      	bne.n	80056b2 <__sflush_r+0x76>
 80056ae:	682b      	ldr	r3, [r5, #0]
 80056b0:	b903      	cbnz	r3, 80056b4 <__sflush_r+0x78>
 80056b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80056b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056b6:	602f      	str	r7, [r5, #0]
 80056b8:	b1b9      	cbz	r1, 80056ea <__sflush_r+0xae>
 80056ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056be:	4299      	cmp	r1, r3
 80056c0:	d002      	beq.n	80056c8 <__sflush_r+0x8c>
 80056c2:	4628      	mov	r0, r5
 80056c4:	f7ff fbf2 	bl	8004eac <_free_r>
 80056c8:	2300      	movs	r3, #0
 80056ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80056cc:	e00d      	b.n	80056ea <__sflush_r+0xae>
 80056ce:	2301      	movs	r3, #1
 80056d0:	4628      	mov	r0, r5
 80056d2:	47b0      	blx	r6
 80056d4:	4602      	mov	r2, r0
 80056d6:	1c50      	adds	r0, r2, #1
 80056d8:	d1c9      	bne.n	800566e <__sflush_r+0x32>
 80056da:	682b      	ldr	r3, [r5, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0c6      	beq.n	800566e <__sflush_r+0x32>
 80056e0:	2b1d      	cmp	r3, #29
 80056e2:	d001      	beq.n	80056e8 <__sflush_r+0xac>
 80056e4:	2b16      	cmp	r3, #22
 80056e6:	d11e      	bne.n	8005726 <__sflush_r+0xea>
 80056e8:	602f      	str	r7, [r5, #0]
 80056ea:	2000      	movs	r0, #0
 80056ec:	e022      	b.n	8005734 <__sflush_r+0xf8>
 80056ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056f2:	b21b      	sxth	r3, r3
 80056f4:	e01b      	b.n	800572e <__sflush_r+0xf2>
 80056f6:	690f      	ldr	r7, [r1, #16]
 80056f8:	2f00      	cmp	r7, #0
 80056fa:	d0f6      	beq.n	80056ea <__sflush_r+0xae>
 80056fc:	0793      	lsls	r3, r2, #30
 80056fe:	680e      	ldr	r6, [r1, #0]
 8005700:	bf08      	it	eq
 8005702:	694b      	ldreq	r3, [r1, #20]
 8005704:	600f      	str	r7, [r1, #0]
 8005706:	bf18      	it	ne
 8005708:	2300      	movne	r3, #0
 800570a:	eba6 0807 	sub.w	r8, r6, r7
 800570e:	608b      	str	r3, [r1, #8]
 8005710:	f1b8 0f00 	cmp.w	r8, #0
 8005714:	dde9      	ble.n	80056ea <__sflush_r+0xae>
 8005716:	6a21      	ldr	r1, [r4, #32]
 8005718:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800571a:	4643      	mov	r3, r8
 800571c:	463a      	mov	r2, r7
 800571e:	4628      	mov	r0, r5
 8005720:	47b0      	blx	r6
 8005722:	2800      	cmp	r0, #0
 8005724:	dc08      	bgt.n	8005738 <__sflush_r+0xfc>
 8005726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800572a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800572e:	81a3      	strh	r3, [r4, #12]
 8005730:	f04f 30ff 	mov.w	r0, #4294967295
 8005734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005738:	4407      	add	r7, r0
 800573a:	eba8 0800 	sub.w	r8, r8, r0
 800573e:	e7e7      	b.n	8005710 <__sflush_r+0xd4>
 8005740:	dfbffffe 	.word	0xdfbffffe

08005744 <_fflush_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	690b      	ldr	r3, [r1, #16]
 8005748:	4605      	mov	r5, r0
 800574a:	460c      	mov	r4, r1
 800574c:	b913      	cbnz	r3, 8005754 <_fflush_r+0x10>
 800574e:	2500      	movs	r5, #0
 8005750:	4628      	mov	r0, r5
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	b118      	cbz	r0, 800575e <_fflush_r+0x1a>
 8005756:	6a03      	ldr	r3, [r0, #32]
 8005758:	b90b      	cbnz	r3, 800575e <_fflush_r+0x1a>
 800575a:	f7ff f9a5 	bl	8004aa8 <__sinit>
 800575e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0f3      	beq.n	800574e <_fflush_r+0xa>
 8005766:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005768:	07d0      	lsls	r0, r2, #31
 800576a:	d404      	bmi.n	8005776 <_fflush_r+0x32>
 800576c:	0599      	lsls	r1, r3, #22
 800576e:	d402      	bmi.n	8005776 <_fflush_r+0x32>
 8005770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005772:	f7ff fb98 	bl	8004ea6 <__retarget_lock_acquire_recursive>
 8005776:	4628      	mov	r0, r5
 8005778:	4621      	mov	r1, r4
 800577a:	f7ff ff5f 	bl	800563c <__sflush_r>
 800577e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005780:	07da      	lsls	r2, r3, #31
 8005782:	4605      	mov	r5, r0
 8005784:	d4e4      	bmi.n	8005750 <_fflush_r+0xc>
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	059b      	lsls	r3, r3, #22
 800578a:	d4e1      	bmi.n	8005750 <_fflush_r+0xc>
 800578c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800578e:	f7ff fb8b 	bl	8004ea8 <__retarget_lock_release_recursive>
 8005792:	e7dd      	b.n	8005750 <_fflush_r+0xc>

08005794 <__swhatbuf_r>:
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	460c      	mov	r4, r1
 8005798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800579c:	2900      	cmp	r1, #0
 800579e:	b096      	sub	sp, #88	@ 0x58
 80057a0:	4615      	mov	r5, r2
 80057a2:	461e      	mov	r6, r3
 80057a4:	da0d      	bge.n	80057c2 <__swhatbuf_r+0x2e>
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057ac:	f04f 0100 	mov.w	r1, #0
 80057b0:	bf14      	ite	ne
 80057b2:	2340      	movne	r3, #64	@ 0x40
 80057b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80057b8:	2000      	movs	r0, #0
 80057ba:	6031      	str	r1, [r6, #0]
 80057bc:	602b      	str	r3, [r5, #0]
 80057be:	b016      	add	sp, #88	@ 0x58
 80057c0:	bd70      	pop	{r4, r5, r6, pc}
 80057c2:	466a      	mov	r2, sp
 80057c4:	f000 f87c 	bl	80058c0 <_fstat_r>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	dbec      	blt.n	80057a6 <__swhatbuf_r+0x12>
 80057cc:	9901      	ldr	r1, [sp, #4]
 80057ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80057d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80057d6:	4259      	negs	r1, r3
 80057d8:	4159      	adcs	r1, r3
 80057da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057de:	e7eb      	b.n	80057b8 <__swhatbuf_r+0x24>

080057e0 <__smakebuf_r>:
 80057e0:	898b      	ldrh	r3, [r1, #12]
 80057e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057e4:	079d      	lsls	r5, r3, #30
 80057e6:	4606      	mov	r6, r0
 80057e8:	460c      	mov	r4, r1
 80057ea:	d507      	bpl.n	80057fc <__smakebuf_r+0x1c>
 80057ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	6123      	str	r3, [r4, #16]
 80057f4:	2301      	movs	r3, #1
 80057f6:	6163      	str	r3, [r4, #20]
 80057f8:	b003      	add	sp, #12
 80057fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057fc:	ab01      	add	r3, sp, #4
 80057fe:	466a      	mov	r2, sp
 8005800:	f7ff ffc8 	bl	8005794 <__swhatbuf_r>
 8005804:	9f00      	ldr	r7, [sp, #0]
 8005806:	4605      	mov	r5, r0
 8005808:	4639      	mov	r1, r7
 800580a:	4630      	mov	r0, r6
 800580c:	f7ff fbba 	bl	8004f84 <_malloc_r>
 8005810:	b948      	cbnz	r0, 8005826 <__smakebuf_r+0x46>
 8005812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005816:	059a      	lsls	r2, r3, #22
 8005818:	d4ee      	bmi.n	80057f8 <__smakebuf_r+0x18>
 800581a:	f023 0303 	bic.w	r3, r3, #3
 800581e:	f043 0302 	orr.w	r3, r3, #2
 8005822:	81a3      	strh	r3, [r4, #12]
 8005824:	e7e2      	b.n	80057ec <__smakebuf_r+0xc>
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	6020      	str	r0, [r4, #0]
 800582a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	9b01      	ldr	r3, [sp, #4]
 8005832:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005836:	b15b      	cbz	r3, 8005850 <__smakebuf_r+0x70>
 8005838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800583c:	4630      	mov	r0, r6
 800583e:	f000 f851 	bl	80058e4 <_isatty_r>
 8005842:	b128      	cbz	r0, 8005850 <__smakebuf_r+0x70>
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	f023 0303 	bic.w	r3, r3, #3
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	89a3      	ldrh	r3, [r4, #12]
 8005852:	431d      	orrs	r5, r3
 8005854:	81a5      	strh	r5, [r4, #12]
 8005856:	e7cf      	b.n	80057f8 <__smakebuf_r+0x18>

08005858 <_putc_r>:
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	460d      	mov	r5, r1
 800585c:	4614      	mov	r4, r2
 800585e:	4606      	mov	r6, r0
 8005860:	b118      	cbz	r0, 800586a <_putc_r+0x12>
 8005862:	6a03      	ldr	r3, [r0, #32]
 8005864:	b90b      	cbnz	r3, 800586a <_putc_r+0x12>
 8005866:	f7ff f91f 	bl	8004aa8 <__sinit>
 800586a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800586c:	07d8      	lsls	r0, r3, #31
 800586e:	d405      	bmi.n	800587c <_putc_r+0x24>
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	0599      	lsls	r1, r3, #22
 8005874:	d402      	bmi.n	800587c <_putc_r+0x24>
 8005876:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005878:	f7ff fb15 	bl	8004ea6 <__retarget_lock_acquire_recursive>
 800587c:	68a3      	ldr	r3, [r4, #8]
 800587e:	3b01      	subs	r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	60a3      	str	r3, [r4, #8]
 8005884:	da05      	bge.n	8005892 <_putc_r+0x3a>
 8005886:	69a2      	ldr	r2, [r4, #24]
 8005888:	4293      	cmp	r3, r2
 800588a:	db12      	blt.n	80058b2 <_putc_r+0x5a>
 800588c:	b2eb      	uxtb	r3, r5
 800588e:	2b0a      	cmp	r3, #10
 8005890:	d00f      	beq.n	80058b2 <_putc_r+0x5a>
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	6022      	str	r2, [r4, #0]
 8005898:	701d      	strb	r5, [r3, #0]
 800589a:	b2ed      	uxtb	r5, r5
 800589c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800589e:	07da      	lsls	r2, r3, #31
 80058a0:	d405      	bmi.n	80058ae <_putc_r+0x56>
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	059b      	lsls	r3, r3, #22
 80058a6:	d402      	bmi.n	80058ae <_putc_r+0x56>
 80058a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058aa:	f7ff fafd 	bl	8004ea8 <__retarget_lock_release_recursive>
 80058ae:	4628      	mov	r0, r5
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
 80058b2:	4629      	mov	r1, r5
 80058b4:	4622      	mov	r2, r4
 80058b6:	4630      	mov	r0, r6
 80058b8:	f7ff f9e7 	bl	8004c8a <__swbuf_r>
 80058bc:	4605      	mov	r5, r0
 80058be:	e7ed      	b.n	800589c <_putc_r+0x44>

080058c0 <_fstat_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4d07      	ldr	r5, [pc, #28]	@ (80058e0 <_fstat_r+0x20>)
 80058c4:	2300      	movs	r3, #0
 80058c6:	4604      	mov	r4, r0
 80058c8:	4608      	mov	r0, r1
 80058ca:	4611      	mov	r1, r2
 80058cc:	602b      	str	r3, [r5, #0]
 80058ce:	f7fb fe9e 	bl	800160e <_fstat>
 80058d2:	1c43      	adds	r3, r0, #1
 80058d4:	d102      	bne.n	80058dc <_fstat_r+0x1c>
 80058d6:	682b      	ldr	r3, [r5, #0]
 80058d8:	b103      	cbz	r3, 80058dc <_fstat_r+0x1c>
 80058da:	6023      	str	r3, [r4, #0]
 80058dc:	bd38      	pop	{r3, r4, r5, pc}
 80058de:	bf00      	nop
 80058e0:	200004f0 	.word	0x200004f0

080058e4 <_isatty_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4d06      	ldr	r5, [pc, #24]	@ (8005900 <_isatty_r+0x1c>)
 80058e8:	2300      	movs	r3, #0
 80058ea:	4604      	mov	r4, r0
 80058ec:	4608      	mov	r0, r1
 80058ee:	602b      	str	r3, [r5, #0]
 80058f0:	f7fb fe9d 	bl	800162e <_isatty>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d102      	bne.n	80058fe <_isatty_r+0x1a>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	b103      	cbz	r3, 80058fe <_isatty_r+0x1a>
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	bd38      	pop	{r3, r4, r5, pc}
 8005900:	200004f0 	.word	0x200004f0

08005904 <_sbrk_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4d06      	ldr	r5, [pc, #24]	@ (8005920 <_sbrk_r+0x1c>)
 8005908:	2300      	movs	r3, #0
 800590a:	4604      	mov	r4, r0
 800590c:	4608      	mov	r0, r1
 800590e:	602b      	str	r3, [r5, #0]
 8005910:	f7fb fea6 	bl	8001660 <_sbrk>
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	d102      	bne.n	800591e <_sbrk_r+0x1a>
 8005918:	682b      	ldr	r3, [r5, #0]
 800591a:	b103      	cbz	r3, 800591e <_sbrk_r+0x1a>
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	bd38      	pop	{r3, r4, r5, pc}
 8005920:	200004f0 	.word	0x200004f0

08005924 <_init>:
 8005924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005926:	bf00      	nop
 8005928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592a:	bc08      	pop	{r3}
 800592c:	469e      	mov	lr, r3
 800592e:	4770      	bx	lr

08005930 <_fini>:
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	bf00      	nop
 8005934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005936:	bc08      	pop	{r3}
 8005938:	469e      	mov	lr, r3
 800593a:	4770      	bx	lr
